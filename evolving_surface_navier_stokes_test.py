from ngsolve import SetNumThreads
import numpy as np
import scipy.integrate as sci
import matplotlib.pyplot as plt
import seaborn as sns

from utils import *
from stokes_solvers import Exact, moving_ns, moving_ns_direct

SetNumThreads(16)

mode = "advect-nonsol"

if mode in ['advect', 'advect-nonsol']:
    maxvel = 0.2
    band_type = 'both'
    R = 1.0
    phi = -R + sqrt(x ** 2 + y ** 2 + z ** 2)
    mu = 1.0

    exact = Exact(mu=mu, R=R, maxvel=maxvel)
    t = exact.t
    w1, w2, w3 = maxvel, 0, 0
    if mode == 'advect':
        exact.set_params(
            phi=CoefficientFunction(
                -R + sqrt((-t * w1 + x) ** 2 + (-t * w2 + y) ** 2 + (-t * w3 + z) ** 2)
            ),
            wN=CoefficientFunction(
                (-t*(w1**2 + w2**2 + w3**2) + w1*x + w2*y + w3*z)/sqrt(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)
            ),
            u=CoefficientFunction((
                x * (t * w3 - z) / sqrt(
                t ** 2 * (w1 ** 2 + w2 ** 2 + w3 ** 2) - 2 * t * (w1 * x + w2 * y + w3 * z) + x ** 2 + y ** 2 + z ** 2),
                    y * (-t * w3 + z) / sqrt(
                        t ** 2 * (w1 ** 2 + w2 ** 2 + w3 ** 2) - 2 * t * (w1 * x + w2 * y + w3 * z) + x ** 2 + y ** 2 + z ** 2),
                    (-t * w1 * x + t * w2 * y + x ** 2 - y ** 2) / sqrt(
                        t ** 2 * (w1 ** 2 + w2 ** 2 + w3 ** 2) - 2 * t * (w1 * x + w2 * y + w3 * z) + x ** 2 + y ** 2 + z ** 2)
            )),
            p=CoefficientFunction(
                y*(-t*w1 + x) + z
            ),
            f=CoefficientFunction((
                -4*mu*(t*w1 - x)*(t*w3 - z)/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**(3/2) + x + y + (t*w1 - x)*(t*w1*y + t*w2*x - 2*x*y)**2/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2 + (t*w1 - x)*(t**2*w1*w2 - t*(2*w1*y + w2*x + w3) + 2*x*y + z)/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2) + (t*w2*x*y - x*(t**2*(w1**2 + w2**2) - 2*t*w1*x + x**2) + y**2*(-t*w1 + x))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2) + (-t**2*w1*z*(w1**2 + w2**2 + 2*w3**2) + t*w2*w3*y*(-t*w1 + x) + t*w3*(t*w1 - 2*x)*(t*(w1**2 + w2**2 + w3**2) - w1*x) + t*z*(3*w1**2*x + 2*w1*w2*y + 3*w2**2*x + 4*w3**2*x) + w3*y**2*(-t*w1 + 2*x) + w3*z**2*(t*w1 - 2*x) - 2*x*z*(w1*x + 2*w2*y))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**(3/2),
                4*mu*(t*w2 - y)*(t*w3 - z)/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**(3/2) - t*w1 + x + y + (t*w2 - y)*(t*w1*y + t*w2*x - 2*x*y)**2/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2 + (t*w2 - y)*(t**2*w1*w2 - t*(2*w1*y + w2*x + w3) + 2*x*y + z)/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2) + (-t**2*y*(w1**2 + w2**2) + t*(w1*x*y - w2*x**2 + 2*w2*y**2) + y*(x - y)*(x + y))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2) + (-t**3*w2*w3*(w1**2 + w2**2 + w3**2) + t**2*(w2*z*(w1**2 + w2**2 + 2*w3**2) + w3*(2*w1**2*y + w1*w2*x + 3*w2**2*y + 2*w3**2*y)) - t*(2*w1*w2*x*z + 3*w2**2*y*z + w2*w3*(-x**2 + 2*y**2 + z**2) + y*(3*w1**2*z + w1*w3*x + 4*w3**2*z)) + 2*y*(2*w1*x*z + w2*y*z - w3*x**2 + w3*z**2))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**(3/2),
                (4*mu*(t*(w1 - w2) - x + y)*(t*(w1 + w2) - x - y)*sqrt(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2) + (t*w3 - z)*(-t**3*(w1*x + w2*y)*(w1**2 + w2**2 + w3**2) + t**2*(w1**2*(3*x**2 + 2*y**2) + 2*w1*x*(3*w2*y + w3*z) + w2**2*(2*x**2 + 3*y**2) + 2*w2*w3*y*z + w3**2*(x**2 + y**2)) - t*(w1*x*(3*x**2 + 7*y**2 + z**2) + w2*y*(7*x**2 + 3*y**2 + z**2) + 2*w3*z*(x**2 + y**2)) + x**4 + x**2*(6*y**2 + z**2) + y**2*(y**2 + z**2)) + sqrt(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)*(-t**3*(w1 - w2)*(w1 + w2)*(w1**2 + w2**2 + w3**2) + t**2*(4*w1**3*x + w1**2*(-2*w2*y + w3*z) + w1*x*(2*w2**2 + 3*w3**2) - w2*(4*w2**2*y + w2*w3*z + 3*w3**2*y)) + t*(w1**2*(-5*x**2 + 3*y**2) - 3*w1*w3*x*z + w2**2*(-3*x**2 + 5*y**2) + 3*w2*w3*y*z + 2*w3**2*(-x**2 + y**2)) + 2*w1*x**3 - 4*w1*x*y**2 + 4*w2*x**2*y - 2*w2*y**3 + 2*w3*z*(x - y)*(x + y)) + (t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)*(t**3*w1*w2*w3 + t**2*(w1*(w1 - w2*z - 2*w3*y) + w2*(w2 - w3*x)) + t*(-2*w1*x + 2*w1*y*z + w2*x*z - 2*w2*y + 2*w3*x*y) + x**2 - 2*x*y*z + y**2))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2
            )),
            g=CoefficientFunction(
                0.0
            ),
            fel=CoefficientFunction((
                (4*mu*(-t*w1 + x) + x*(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2))*(t*w3 - z)/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**(3/2),
                -(4*mu*(-t*w2 + y) + y*(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2))*(t*w3 - z)/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**(3/2),
                (4*mu*(t*(w1 - w2) - x + y)*(t*(w1 + w2) - x - y) - (t*w1*x - t*w2*y - x**2 + y**2)*(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**(3/2)
            ))
        )
    else:
        exact.set_params(
            phi=CoefficientFunction(
                -R + sqrt((-t * w1 + x) ** 2 + (-t * w2 + y) ** 2 + (-t * w3 + z) ** 2)
            ),
            wN=CoefficientFunction(
                (-t*(w1**2 + w2**2 + w3**2) + w1*x + w2*y + w3*z)/sqrt(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)
            ),
            u=CoefficientFunction((
                -(-2*t*w3*z**3 + x*z*(-t*w1 + x) + z**4 + z**2*(t**2*(w2**2 + w3**2) - 2*t*w2*y + y**2) + (t*w1 - x)*(t*w2*y + t*w3*x - y**2))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2),
                (t**2*(w2*(w1*z**2 - w3*x) + y*(w1**2 + w3**2)) - t*(w1*y*(2*x + z**2) + w2*x*z*(z - 1) - w3*y*(x - 2*z)) + y*(x**2 + x*z*(z - 1) + z**2))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2),
                (t**2*(w1**2*x + w1*w3*z**2 + w2*(w2*x - w3*y)) + t*(-w1*(2*x**2 + z**3) + w2*y*(-2*x + z) + w3*(-x*z**2 + y**2)) + x**3 + x*(y**2 + z**3) - y**2*z)/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)
            )),
            p=CoefficientFunction(
                y**3*(-t*w1 + x) + z
            ),
            f=CoefficientFunction((
                mu*(2*t**4*(w1**2*(w2**2 + 2*w3**2) + w2**2*(w2**2 + w3**2)) - t**3*(w1**2*(4*w2*y + 3*w3*(6*z - 1)) + 4*w1*(w2**2*(x - 2) + 2*w3**2*x) + 8*w2**3*y + w2**2*w3*(5 - 2*z) + 4*w2*w3**2*y + w3**3*(5 - 6*z)) + t**2*(w1**2*(2*y**2 + z*(14*z - 3)) + 4*w1*w3*x*(9*z - 2) + w2**2*(x*(2*x - 8) + 12*y**2 + z*(5 - 6*z)) + 2*w2*y*(w1*(4*x - 9) + w3*(5 - 2*z)) + w3**2*(4*x**2 + 2*y**2 + z*(15 - 20*z))) + t*(2*w1*(2*x*z*(2 - 7*z) + y**2*(5 - 2*x)) - 2*w2*y*(x*(2*x - 9) + 4*y**2 + z*(5 - 6*z)) + w3*(x**2*(5 - 18*z) + y**2*(2*z - 5) + z**2*(22*z - 15))) + x**2*(2*y**2 + z*(14*z - 5)) - 10*x*y**2 + (y**2 + z**2)*(2*y**2 + z*(5 - 8*z)))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2 + y**3 + (t*w1 - x)*(3*t*w2*y**2*(t*w1 - x) - t*w3 + y**3*(-4*t*w1 + 4*x) + z)/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2) + (t*(w1**2 + w2**2 + w3**2) - w1*x - w2*y - w3*z)*(-2*t*w3*z**3 + x*z*(-t*w1 + x) + z**4 + z**2*(t**2*(w2**2 + w3**2) - 2*t*w2*y + y**2) + (t*w1 - x)*(t*w2*y + t*w3*x - y**2))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2 + (-t**4*(w1*(w1*w3 + w2**2) + 2*w3*z*(w2**2 + w3**2))*(w1**2 + w2**2 + w3**2) + t**3*(w1**4*z + w1**3*(2*w2*y + 3*w3*x) + w1**2*(w2**2*(2*x + 2*z**2 + z) + w2*w3*y*(4*z + 1) + 2*w3**2*z*(3*z + 1)) + w1*(3*w2**3*y + w2**2*w3*(2*x*(z + 1) + z) + 2*w2*w3**2*y + 2*w3**3*x*(z + 1)) + (w2**2 + w3**2)*(w2**2*(x + 2*z**2) + 6*w2*w3*y*z + 8*w3**2*z**2)) - t**2*(w1**3*(3*x*z + y**2) + w1**2*(w2*y*(4*x + 5*z**2 + z) + 3*w3*x**2 + w3*z*(2*y**2 + 7*z**2 + z)) + w1*(w2**2*(x**2 + x*z*(z + 2) + 2*y**2) + w2*w3*y*(4*x*z + x + z) + w3**2*(x*z*(5*z + 3) + y**2)) + w2**3*(4*x*y + 6*y*z**2) + w2**2*w3*(2*x**2 + x*z + 6*y**2*z + 8*z**3) + w2*w3**2*y*(3*x + 14*z**2) + 2*w3**3*(x**2 + y**2*z + 6*z**3)) + t*(w1**2*(3*x**2*z + 2*x*y**2 + 3*z**2*(y**2 + z**2)) + w1*(-w2*y*(-2*x**2 - x*z*(4*z + 1) + y**2 + z**2) + w3*x*(x**2 + y**2*(2*z - 1) + 6*z**3)) + w2**2*(-x**2*z*(z - 2) + 5*x*y**2 + 2*z**2*(3*y**2 + z**2)) + w2*w3*y*(2*x**2 + 3*x*z + 2*z*(y**2 + 5*z**2)) + w3**2*(-x**2*z*(z - 4) + 2*x*y**2 + 4*z**2*(y**2 + 2*z**2))) + w1*(-x**3*z - x**2*y**2 - x*z*(y**2 + z**2)*(3*z - 1) + y**2*(y**2 + z**2)) - (w2*y + w3*z)*(-x**2*z*(z - 2) + 2*x*y**2 + 2*z**2*(y**2 + z**2)))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2 + (t**4*(-w1**3*w2*y + w1**2*(-w2**2*z*(2*x + z) + w2*w3*y + w3**2*(-2*x*z + x)) + w1*w3*(w2**2*(x - 2*z**3 + z**2) - w2*w3*y + w3**2*z**2*(1 - 2*z)) - 2*w2*z*(w2**2 + w3**2)*(w2*x - w3*y)) + t**3*(w1**3*y**2 - w1**2*w3*(x*z*(2 - 5*z) + y**2) + w1*w3**2*(x**2*(4*z - 3) + y**2 + z**3*(7*z - 3)) + w2**3*y*z*(8*x - 3*z) - w2**2*(w1*y**2 + w1*z*(-4*x**2 - 2*x*z + x - 3*z**3 + z**2) + w3*x*(x - 2*z**2*(z + 1)) + 6*w3*y**2*z) + w2*y*(w1**2*(x*(4*z + 3) + z*(3*z - 1)) + 2*w1*w3*(-3*x + z**2*(2*z - 1) + z) + w3**2*(4*x*z + x - 7*z**2)) + 2*w3**3*z*(x*z*(z - 1) - y**2)) - t**2*(w1**2*(x*y**2*(2*z + 3) + x*z**2*(3*z - 1) + y**2*z*(2*z - 1)) + w1*w2*y*(x**2*(8*z + 3) + 6*x*z*(z - 1) - 2*y**2 + 6*z**4 - 2*z**3 + z**2) + w2**2*(2*x**3*z + x**2*z*(z - 1) + x*y**2*(12*z - 1) + 3*x*z**4 - 9*y**2*z**2) + w3**2*(2*x**3*(z - 1) + x*y**2*(2*z + 1) + x*z**3*(7*z - 6) - 7*y**2*z**2) + w3*(w1*(2*x**2*z*(5*z - 3) - 5*x*y**2 + y**2*z*(z*(2*z - 1) + 2) + z**4*(8*z - 3)) + w2*y*(-5*x**2 + 2*x*z*(2*z*(z + 1) + 1) - 6*y**2*z - 8*z**3))) + t*(w1*(x**2*(y**2*(4*z + 3) + 3*z**2*(2*z - 1)) + x*y**2*z*(4*z - 5) - y**4 + y**2*z**2*(z*(3*z - 1) + 1) + z**5*(3*z - 1)) + w2*y*(x**3*(4*z + 1) + x**2*z*(3*z - 5) + x*(y**2*(8*z - 2) + 6*z**4 + z**2) - 9*y**2*z**2 - 3*z**4) + w3*(x**3*z*(5*z - 4) - 4*x**2*y**2 + 2*x*z*(y**2*(z**2 + z + 1) + z**3*(4*z - 3)) - 2*y**2*z*(y**2 + 4*z**2))) - x**3*(y**2*(2*z + 1) + z**2*(3*z - 2)) - 2*x**2*y**2*z*(z - 2) + x*(y**4*(1 - 2*z) - y**2*(3*z**4 + z**2) + z**5*(2 - 3*z)) + 3*y**2*z**2*(y**2 + z**2))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2,
                -2*mu*(t**4*w1*w2*(w1**2 + w2**2 - w3**2) + t**3*(-w1**3*y + w1**2*w2*(4 - 3*x) + w1*(-3*w2**2*y + 2*w2*w3*(5*z - 2) + w3**2*y) - w2**3*x + w2*w3**2*(x + 4)) + t**2*(w1**2*y*(3*x - 5) + w1*w2*(x*(3*x - 8) + 3*y**2 + z*(4 - 10*z)) + 2*w1*w3*y*(2 - 5*z) + 3*w2**2*x*y + 5*w2*w3*x - 2*w2*w3*z*(5*x + 4) - w3**2*y*(x + 5)) + 2*t*z**2*(5*w1*y + w2*(5*x + 2)) + t*z*(-4*w1*y - 5*w2*x + 10*w3*y*(x + 1)) - t*(w1*y*(x*(3*x - 10) + y**2) + w2*x*(x*(x - 4) + 3*y**2) + 5*w3*x*y) + y*(5*x*z + x*(x*(x - 5) + y**2) - z**2*(10*x + 5)))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2 + y**2*(-3*t*w1 + 3*x) + (t*w2 - y)*(3*t*w2*y**2*(t*w1 - x) - t*w3 + y**3*(-4*t*w1 + 4*x) + z)/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2) - (t**2*(w2*(w1*z**2 - w3*x) + y*(w1**2 + w3**2)) - t*(w1*y*(2*x + z**2) + w2*x*z*(z - 1) - w3*y*(x - 2*z)) + y*(x**2 + x*z*(z - 1) + z**2))*(t*(w1**2 + w2**2 + w3**2) - w1*x - w2*y - w3*z)/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2 + (t**4*(w1**4*y + w1**3*w2*z*(2*x + z) + w1**2*w3*(-w2*x + 2*w2*z**3 + 2*w3*y) + w1*w2*(2*w2**2*x*z + w2*w3*y*(1 - 2*z) + w3**2*(x + z**2)) + w2**3*w3*z**2 + w2*w3**3*(-x + z**2) + w3**4*y) + t**3*(-2*w1**3*y*(x*(z + 2) + z**2) + w1**2*(w2*(y**2 + z*(-6*x**2 - 3*x*z + x - 3*z**3)) + 2*w3*y*(x - z*(z**2 + 2))) + w1*(w2**2*y*z*(-6*x + 3*z - 1) + 2*w2*w3*(x**2 + x*z*(-2*z**2 + z - 1) + y**2*(2*z - 1) - z**3) - w3**2*y*(5*x + 2*z**2)) - w2**3*(2*x**2*z + z**3) + w2**2*w3*y*(2*x*(z - 1) - 3*z**2) + w2*w3**2*(-2*x**2 - x*z*(z - 3) + y**2 - 3*z**3) + w3**3*y*(2*x - z*(z + 4))) + t**2*(w2**2*y*z*(6*x**2 + x*(2 - 3*z) + 3*z**2) + w2*(-w3*x**3 - x*y**2*(2*w1 - 4*w3) + 2*x*z**3*(-w1 + w3*x + w3) + z**4*(6*w1*x + w1 + 3*w3) + z**2*(x*(3*w1*x + w1 - w3*(2*x + 3)) + y**2*(-6*w1 + 3*w3)) + z*(2*x**2*(w1*(3*x - 1) + 2*w3) + 2*y**2*(3*w1*x + w1 - w3*(2*x + 1)))) + y*(w1**2*(6*x**2*(z + 1) + 2*x*z*(3*z - 1) - y**2 + 3*z**4 + 2*z**2) + w1*w3*(-4*x**2 + 2*x*z*(z*(2*z - 1) + 5) - 2*y**2*z + y**2 + 4*z**3) + w3**2*(4*x**2 + 2*x*z*(z - 3) - y**2 + 3*z**2*(z + 2)))) + t*(-w2*z**5 + x*y*(w2*x*y + x**2*(-4*w1 + 2*w3) + y**2*(2*w1 - 2*w3)) - z**4*(w1*y*(6*x + 2) + w2*x*(3*x + 1) + 3*w3*y) + z**3*(2*w1*x*y + w2*(2*x**2 + x - 3*y**2) - 2*w3*y*(x*(x + 2) + 2)) + z**2*(-w2*x**2*(x + 2) + w2*y**2*(6*x + 1) + x*y*(-w1*(6*x + 5) + 2*w3*(x + 3)) + y**3*(3*w1 - w3)) - z*(w2*x**3*(2*x - 1) + 2*w2*x*y**2*(3*x + 2) + 2*x**2*y*(w1*(3*x - 2) + 4*w3) + y**3*(2*w1*x + w1 - 2*w3*(x + 1)))) + y*(x**2*(x - y)*(x + y) + 2*x*z*(x**2*(x - 1) + y**2*(x + 1)) + z**5 + z**4*(x*(3*x + 2) + 1) + z**3*(-2*x*(x + 1) + y**2) + z**2*(2*x**2*(x + 2) - y**2*(3*x + 1))))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2 + (t**4*w2*(w1**2 + w2**2 + w3**2)*(w1**2 + w1*w3*(2*z - 1) + w3**2) + t**3*(-w1**4*y + w1**3*(w2*(-3*x - 2*z**2 + z) + w3*y*(1 - 2*z)) - w1**2*(-2*w2*w3*x + w2*w3*z*(4*x + 3) + y*(2*w2**2 + 2*w3**2)) + w1*(w2**3*(-2*x - 2*z**2 + z) + 2*w2**2*w3*y*(1 - 2*z) + w2*w3**2*(-3*x - 4*z**2 + 2*z) + w3**3*y*(1 - 2*z)) - w3*(w2**3*(-x + z*(2*x + 2)) + 2*w2**2*w3*y + w2*w3**2*(2*x*z - x + 3*z) + w3**3*y)) + t**2*(w1**3*y*(3*x + z*(3*z - 1)) + w1**2*(w2*(3*x**2 + x*z*(3*z - 2) + z**2) + w3*y*(x*(4*z - 3) + 3*z)) + w1*(w2**2*y*(5*x + 2*z*(2*z - 1)) + w2*w3*(y**2*(2*z - 1) + z*(2*x*(x + 2) + z*(z - 1))) + w3**2*y*(3*x + z*(5*z - 2))) + w2*z**2*(w2**2*(2*x + 1) + w3**2*(4*x + 3)) + x*(w2**2 + w3**2)*(w2*x - 2*w3*y) + z*(w2**2*w3*y*(4*x + 5) - w2*x*(w2**2 + w3**2) + w3**3*y*(2*x + 3))) + t*(w1**2*y*(-3*x**2 + 3*x*z + y**2 - z**2*(6*x + 1)) + w1*(-w2*(x**3 + x*(2*y**2 + z**2) - z*(-2*y**2*z + y**2 + z**3)) + w3*y*(2*x**2 - 2*x*z*(x + 2) - 3*z**3 + z**2)) - w2**2*y*(3*x**2 - 2*x*z + z**2*(4*x + 3)) - w2*w3*(x**3 + x**2*z + x*y**2*(2*z - 1) + x*z**2*(z + 1) + 2*y**2*z + z**3) + w3**2*y*(-x**2 + x*z*(4 - 5*z) + y**2 - 3*z**2)) + w1*x*y*(x**2 + x*z*(3*z - 2) - y**2 + z**2) + 2*w2*x**2*y**2 - w2*x*z**4 + z**3*(w2*x + w3*y*(3*x + 1)) + z**2*(-w2*x**3 + 2*w2*y**2*(x + 1) - 2*w3*x*y) + z*(x - y)*(x + y)*(w2*x + w3*y))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2,
                mu*(-4*t**4*w1*w3*(w1**2 + w2**2) + t**3*(w1**3*(14*z - 3) + 12*w1**2*w3*x + w1*(w2**2*(14*z - 3) + 8*w2*w3*y + w3**2*(5 - 6*z)) + 4*w2**2*w3*(x + 2)) - t**2*(w1**2*x*(42*z - 11) + 2*w1*(w2*y*(14*z - 3) + w3*(6*x**2 + 2*y**2 + z*(5 - 7*z))) + w2**2*(14*x*z - 5*x + 8*z) + 2*w2*w3*y*(4*x + 9) + w3**2*x*(5 - 6*z)) + t*(w1*x**2*(42*z - 13) + w1*y**2*(14*z - 3) + w1*z**2*(5 - 8*z) + 2*w2*y*(x*(14*z - 5) + 9*z) + 2*w3*(2*x**3 + 2*x*y**2 + x*z*(5 - 7*z) + 5*y**2)) + 8*x*z**3 - 5*x*z**2 + 5*x*(x**2 + y**2) - z*(14*x**3 + 2*y**2*(7*x + 5)))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2 - (t*(w1**2 + w2**2 + w3**2) - w1*x - w2*y - w3*z)*(t**2*(w1**2*x + w1*w3*z**2 + w2*(w2*x - w3*y)) + t*(-w1*(2*x**2 + z**3) + w2*y*(-2*x + z) + w3*(-x*z**2 + y**2)) + x**3 + x*(y**2 + z**3) - y**2*z)/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2 + (3*t**3*w1*w2*w3*y**2 + t**2*(w1**2 - w1*y**2*(3*w2*z + 4*w3*y) + w2*(w2 - 3*w3*x*y**2)) + t*(-2*w1*(x - 2*y**3*z) + w2*y*(3*x*y*z - 2) + 4*w3*x*y**3) + x**2 - 4*x*y**3*z + y**2)/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2) + (t**4*(-w1**3*(w2*y + w3*(-2*x*z + x)) - w1**2*(w2**2*z**2 + w2*w3*y + w3**2*z**2*(1 - 2*z)) - w1*w2*(w2**2*y + w2*w3*(-2*x*z + x + z**2) + 2*w3**2*y*z) + w2*(-w2*z**2*(w2**2 + w3**2) + w3**2*(w2*x - w3*y))) + t**3*(w1**3*(x*z*(1 - 3*z) + y**2) + w1**2*(w2*y*(4*x + 2*z**2 + z) + w3*(x**2*(4 - 6*z) + y**2 + z**3*(2 - 5*z))) + w1*(w2**2*(3*y**2 + z*(-x*z + x + z**2)) + 4*w2*w3*y*(-x*z + x + 2*z**2) + w3**2*z*(x*z*(3 - 4*z) + 2*y**2)) + 2*w2**3*y*(x + 2*z**2) + w2**2*w3*(-2*x**2*(z - 1) + x*z*(z - 2) - y**2 + 2*z**3) + w2*w3**2*y*(x*(2*z - 3) + z*(2*z + 3)) + w3**3*y**2) + t**2*(w1**2*(x**2*z*(9*z - 4) - 4*x*y**2 - y**2*z*(z + 1) + z**4*(3*z - 1)) + w1*(-w2*y*(5*x**2 - 2*x*z*(z - 2) + 3*y**2 + 6*z**3) + w3*(x**3*(6*z - 5) + x*y**2*(2*z - 3) + 2*x*z**3*(5*z - 3) - 7*y**2*z**2)) + w2**2*(2*x**2*z*(z - 1) + x*(-6*y**2 - z**3 + z**2) + y**2*z*(1 - 6*z) - z**4) + w2*w3*y*(x**2*(4*z - 5) + 2*x*z*(3 - 4*z) + 2*y**2 - z**2*(4*z + 3)) + w3**2*(2*x**2*z**2*(z - 1) - 2*x*y**2*(z - 1) - y**2*z*(z + 3))) + t*(w1*(x**3*z*(5 - 9*z) + 5*x**2*y**2 - x*y**2*z*(z - 3) + 3*x*z**4*(1 - 2*z) + y**4 + 5*y**2*z**3) + w2*y*(2*x**3 + x**2*z*(5 - 4*z) + 6*x*y**2 + 3*x*z**2*(2*z - 1) + y**2*z*(4*z - 2) + z**3*(2*z + 1)) + w3*(-2*x**4*(z - 1) + x**2*(y**2*(3 - 2*z) + z**3*(4 - 5*z)) + x*y**2*z*(7*z - 4) - y**4 + y**2*z**2*(2*z + 3))) + x**4*z*(3*z - 2) - 2*x**3*y**2 + x**2*z*(y**2*(2*z - 3) + z**3*(3*z - 2)) + x*y**2*(-2*y**2 + z**2*(2 - 5*z)) - y**2*z*(y**2*(z - 1) + z**2*(z + 1)))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2 + (t**4*(w1**2 + w2**2 + w3**2)*(w1**3 + w1*(w2**2 + 2*w3**2*z) - w2**2*w3) + t**3*(-4*w1**4*x - w1**3*(3*w2*y + w3*z*(4*z + 1)) + w1**2*(w2**2*(-5*x + z) + 2*w2*w3*y - w3**2*x*(4*z + 3)) - w1*(3*w2**3*y + w2**2*w3*(-x + 4*z**2 + z) + 2*w2*w3**2*y*(z + 1) + 6*w3**3*z**2) + w2**4*(-x + z) + 3*w2**3*w3*y - w2**2*w3**2*(x + z*(2*x - 2)) + 2*w2*w3**3*y - 2*w3**4*x*z) + t**2*(w1**3*(6*x**2 + y**2 + 3*z**3) + w1**2*(w2*y*(7*x - 3*z) + w3*x*z*(7*z + 2) - w3*y**2) + w1*(w2**2*(4*x**2 - x*z + 3*y**2 + 3*z**3) + w2*w3*y*(-x + z*(3*z + 2)) + w3**2*(2*x**2*(z + 2) + y**2 + 6*z**3)) + w2**3*y*(3*x - 4*z) - w2**2*w3*(-4*x*z**2 + 2*y**2 + z**2) + w2*w3**2*y*(3*x + z*(2*x - 4)) - w3**3*(-6*x*z**2 + y**2)) + t*(w1**2*(-4*x**3 + x*(-2*y**2 - 6*z**3 + z**2) + 2*y**2*z) - w1*(w2*y*(5*x**2 - 3*x*z + y**2 + 3*z**3) + w3*z*(x**2*(2*z + 3) - y**2*z + y**2 + 2*z**3)) - w2**2*(x**3 + 3*x*y**2 + x*z**2*(3*z - 1) - 5*y**2*z) - w2*w3*y*(x**2 + x*z*(3*z + 2) + y**2 - 2*z**2) - 2*w3**2*(x**3 + x*(y**2 + 3*z**3) - y**2*z)) + 2*w3*x*z**4 + 3*x*z**3*(w1*x + w2*y) - z**2*(w2*x*y + w3*y**2*(x + 1) + x**2*(w1 + w3*x)) + z*(2*w3*x*(x**2 + y**2) - 2*y**2*(w1*x + w2*y)) + (x**2 + y**2)*(w1*x**2 + y*(w2*x + w3*y)))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2
            )),
            g=CoefficientFunction(
                (t**2*(w1**2 + w1*w3*(2*z - 1) + w3**2) + t*(w1*(-2*x - 4*z**2 + z) + 2*w2*y + 3*w3*x - 2*w3*z*(x + 1)) + x**2 + x*z*(4*z - 3) - 2*y**2 + z**2)/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)
            ),
            fel=CoefficientFunction((
                (mu*(2*t**4*(w1**2*(w2**2 + 2*w3**2) + w2**2*(w2**2 + w3**2)) - t**3*(w1**2*(4*w2*y + 3*w3*(6*z - 1)) + 4*w1*(w2**2*(x - 2) + 2*w3**2*x) + 8*w2**3*y + w2**2*w3*(5 - 2*z) + 4*w2*w3**2*y + w3**3*(5 - 6*z)) + t**2*(w1**2*(2*y**2 + z*(14*z - 3)) + 4*w1*w3*x*(9*z - 2) + w2**2*(x*(2*x - 8) + 12*y**2 + z*(5 - 6*z)) + 2*w2*y*(w1*(4*x - 9) + w3*(5 - 2*z)) + w3**2*(4*x**2 + 2*y**2 + z*(15 - 20*z))) + t*(-4*w1*x*z*(7*z - 2) - 2*w1*y**2*(2*x - 5) - 2*w2*y*(x*(2*x - 9) + 4*y**2 + z*(5 - 6*z)) + w3*(x**2*(5 - 18*z) + y**2*(2*z - 5) + z**2*(22*z - 15))) + x**2*(2*y**2 + z*(14*z - 5)) - 10*x*y**2 + 2*y**4 - 6*y**2*z**2 + 5*y**2*z - 8*z**4 + 5*z**3) - (t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)*(-2*t*w3*z**3 + x*z*(-t*w1 + x) + z**4 + z**2*(t**2*(w2**2 + w3**2) - 2*t*w2*y + y**2) + (t*w1 - x)*(t*w2*y + t*w3*x - y**2)))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2,
                (-2*mu*(t**4*w1*w2*(w1**2 + w2**2 - w3**2) + t**3*(-w1**3*y + w1**2*w2*(4 - 3*x) + w1*(-3*w2**2*y + 2*w2*w3*(5*z - 2) + w3**2*y) - w2**3*x + w2*w3**2*(x + 4)) + t**2*(w1**2*y*(3*x - 5) + w1*w2*(x*(3*x - 8) + 3*y**2 + z*(4 - 10*z)) + 2*w1*w3*y*(2 - 5*z) + 3*w2**2*x*y + w2*w3*(5*x - z*(10*x + 8)) - w3**2*y*(x + 5)) - t*(w1*y*(x*(3*x - 10) + y**2 + z*(4 - 10*z)) + 5*w2*x*z + w2*x*(x*(x - 4) + 3*y**2) - 2*w2*z**2*(5*x + 2) + 5*w3*y*(x - z*(2*x + 2))) + y*(5*x*z + x*(x*(x - 5) + y**2) - z**2*(10*x + 5))) + (t**2*(w2*(w1*z**2 - w3*x) + y*(w1**2 + w3**2)) - t*(w1*y*(2*x + z**2) + w2*x*z*(z - 1) - w3*y*(x - 2*z)) + y*(x**2 + x*z*(z - 1) + z**2))*(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2,
                (-mu*(4*t**4*w1*w3*(w1**2 + w2**2) - t**3*(w1**3*(14*z - 3) + 12*w1**2*w3*x + w1*(w2**2*(14*z - 3) + 8*w2*w3*y + w3**2*(5 - 6*z)) + 4*w2**2*w3*(x + 2)) + t**2*(w1**2*x*(42*z - 11) + 2*w1*(w2*y*(14*z - 3) + w3*(6*x**2 + 2*y**2 + z*(5 - 7*z))) + w2**2*(14*x*z - 5*x + 8*z) + 2*w2*w3*y*(4*x + 9) + w3**2*x*(5 - 6*z)) - t*(w1*x**2*(42*z - 13) + w1*y**2*(14*z - 3) + w1*z**2*(5 - 8*z) + 2*w2*y*(x*(14*z - 5) + 9*z) + 2*w3*(2*x**3 + 2*x*y**2 + x*z*(5 - 7*z) + 5*y**2)) + x**3*(14*z - 5) + x*y**2*(14*z - 5) + x*z**2*(5 - 8*z) + 10*y**2*z) + (t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)*(t**2*(w1**2*x + w1*w3*z**2 + w2*(w2*x - w3*y)) + t*(-w1*(2*x**2 + z**3) + w2*y*(-2*x + z) + w3*(-x*z**2 + y**2)) + x**3 + x*(y**2 + z**3) - y**2*z))/(t**2*(w1**2 + w2**2 + w3**2) - 2*t*(w1*x + w2*y + w3*z) + x**2 + y**2 + z**2)**2
            ))
        )
elif mode == 'l4l2':
    maxvel = 0.5
    band_type = 'inner'
    R = 1.0
    phi = -R + (x ** 4 + y ** 4 + z ** 4) ** (1 / 4)
    mu = 1.0

    exact = Exact(mu=mu, R=R, maxvel=maxvel)
    t = exact.t
    exact.set_params(
        phi=CoefficientFunction(
            -R + (2*t*(x**2*y**2 + x**2*z**2 + y**2*z**2) + x**4 + y**4 + z**4)**(1/4)
        ),
        wN=CoefficientFunction(
            (-x**2*(y**2 + z**2) - y**2*z**2)/(2*sqrt(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6))
        ),
        u=CoefficientFunction((
            -x*z*(t*(x**2 + y**2) + z**2)/sqrt(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6),
            y*z*(t*(x**2 + y**2) + z**2)/sqrt(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6),
            (x - y)*(x + y)*(t*z**2 + x**2 + y**2)/sqrt(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)
        )),
        p=CoefficientFunction(
            y * (-t / 5 + x) + z
        ),
        f=CoefficientFunction((
            -x*(2*mu*z*(t**7*x**14*y**4 + 25*t**7*x**12*y**6 + 64*t**7*x**10*y**8 + 68*t**7*x**8*y**10 + 31*t**7*x**6*y**12 + 3*t**7*x**4*y**14 + 6*t**6*x**14*y**4 + 76*t**6*x**12*y**6 + 216*t**6*x**10*y**8 + 286*t**6*x**8*y**10 + 184*t**6*x**6*y**12 + 46*t**6*x**4*y**14 + 2*t**6*x**2*y**16 + t**5*x**16*y**2 + 50*t**5*x**14*y**4 + 82*t**5*x**12*y**6 + 161*t**5*x**10*y**8 + 355*t**5*x**8*y**10 + 406*t**5*x**6*y**12 + 202*t**5*x**4*y**14 + 23*t**5*x**2*y**16 + 8*t**4*x**16*y**2 + 22*t**4*x**14*y**4 + 54*t**4*x**12*y**6 + 96*t**4*x**10*y**8 + 84*t**4*x**8*y**10 + 156*t**4*x**6*y**12 + 224*t**4*x**4*y**14 + 102*t**4*x**2*y**16 + 6*t**4*y**18 + 14*t**3*x**16*y**2 - 3*t**3*x**14*y**4 + 81*t**3*x**12*y**6 + 34*t**3*x**10*y**8 - 130*t**3*x**8*y**10 - 173*t**3*x**6*y**12 - 77*t**3*x**4*y**14 + 46*t**3*x**2*y**16 + 16*t**3*y**18 + 4*t**2*x**18 + 4*t**2*x**16*y**2 + 62*t**2*x**14*y**4 + 16*t**2*x**12*y**6 - 28*t**2*x**10*y**8 - 98*t**2*x**8*y**10 - 204*t**2*x**6*y**12 - 170*t**2*x**4*y**14 - 82*t**2*x**2*y**16 + 4*t**2*z**18 + 9*t*x**16*y**2 + 12*t*x**14*y**4 + 8*t*x**12*y**6 - 39*t*x**10*y**8 - 49*t*x**8*y**10 - 52*t*x**6*y**12 - 84*t*x**4*y**14 - 49*t*x**2*y**16 - 12*t*y**18 + 4*t*z**16*(x**2*(2*t**3 + 5*t**2 + t + 1) + y**2*(t*(-2*t**2 + t + 4) + 6)) + t*z**12*(x**6*(t + 1)*(t*(t*(t*(t*(4*t + 25) + 62) + 54) + 6) + 17) + x**4*y**2*(t*(t*(t*(t*(t*(4*t - 9) - 61) + 304) + 392) + 333) + 45) + x**2*y**4*(t*(t*(-t*(t*(t*(4*t + 53) + 375) - 288) + 632) + 361) + 159) + y**6*(-t*(t*(t*(t*(t*(4*t + 31) + 107) + 4) - 252) - 59) + 171)) - 6*x**14*y**4 - 6*x**12*y**6 - 12*x**8*y**10 - 12*x**6*y**12 - 6*x**2*y**16 - 6*y**18 + z**14*(x**4*(t**2*(t + 2)*(t*(4*t*(t + 4) + 17) + 10) + 3) + x**2*y**2*(2*t*(t*(t*(78 - 31*t) + 82) + 12) + 6) + y**4*(t*(t*(-t*(2*t - 1)*(t*(2*t + 13) + 28) + 148) + 24) + 15)) + z**10*(x**8*(t*(t*(t*(t*(t*(t*(13*t + 71) + 146) + 137) + 75) + 49) + 10) + 3) + x**6*y**2*(t*(t*(t*(t*(2*t*(t*(10 - 7*t) + 97) + 647) + 838) + 202) + 138) - 9) + x**4*y**4*(2*t*(t*(t*(-t*(t*(t*(62*t + 139) + 100) - 641) + 814) + 277) + 72) + 18) + x**2*y**6*(t*(t*(t*(-2*t**2*(t*(57*t + 134) + 23) + 359*t + 1222) + 782) + 30) + 51) + y**8*(t*(t*(t*(t*(t*(-t*(17*t + 57) + 2) + 87) + 25) + 449) - 30) + 45)) + z**8*(x**10*(t*(t*(t*(t*(t*(t*(17*t + 79) + 131) + 121) + 103) + 37) + 13) + 3) + x**8*y**2*(t*(t*(t*(t*(t*(t*(t + 55) + 496) + 923) + 549) + 469) + 6) + 21) + x**6*y**4*(t*(t*(t*(t*(t*(-4*t*(50*t + 147) + 1165) + 2246) + 1562) + 708) + 117) + 30) + x**4*y**6*(t*(t*(t*(t*(t*(-4*t*(71*t + 200) + 1299) + 2096) + 1590) + 968) + 183) - 12) + x**2*y**8*(t*(t*(t*(t*(-3*t*(19*t*(t + 3) - 68) + 1109) + 719) + 471) + 290) - 45) + y**10*(t*(t*(t*(t*(11*t**2*(t + 3) + t + 105) + 325) - 157) + 207) - 21)) + z**6*(t*x**12*(t*(t*(3*t*(t*(t*(3*t + 13) + 25) + 32) + 71) + 29) + 17) + 2*t*x**10*y**2*(t*(t*(t*(t*(t*(t + 58) + 246) + 226) + 331) + 110) + 36) + t*x**4*y**8*(t*(t*(t*(t*(t*(543 - 85*t) + 1167) + 1916) + 1105) + 289) + 105) + x**8*y**4*(t*(t*(t*(t*(t*(t*(185 - 207*t) + 1033) + 1990) + 1507) + 391) + 111) + 30) + x**6*y**6*(2*t*(t*(t*(t*(t*(t*(133 - 194*t) + 926) + 1317) + 858) + 243) + 62) + 30) + x**2*y**10*(2*t*(t*(t*(t*(t*(t*(41*t + 189) + 270) + 239) + 255) + 31) - 32) + 30) + y**12*(t*(t*(t*(t*(t*(t*(11*t + 73) + 185) + 74) - 67) + 171) - 141) + 30)) + z**4*(t*x**6*y**8*(t*(t*(t*(t*(t*(139*t + 1287) + 1948) + 1012) + 521) + 181) - 48) + x**14*(t**2*(t + 2)*(t*(t*(t*(t + 4) + 20) + 5) + 17) + 3) + x**12*y**2*(t*(t*(t*(t*(t*(9*t*(t + 6) + 146) + 377) + 203) + 150) + 78) - 9) + x**10*y**4*(t*(t*(t*(t*(t*(t*(41*t + 37) + 874) + 982) + 563) + 467) + 78) - 18) + x**8*y**6*(t*(t*(t*(t*(t*(t*(17*t + 657) + 1468) + 1670) + 835) + 283) + 128) - 18) + x**4*y**10*(t*(t*(t*(t*(t*(t*(179*t + 1189) + 1354) + 562) + 65) - 205) - 138) + 18) + x**2*y**12*(t*(t*(t*(t*(t*(t*(59*t + 326) + 858) + 325) - 271) - 186) - 82) - 21) + y**14*(t*(t*(t*(t*(t*(t*(3*t + 28) + 116) + 171) - 7) - 164) + 24) - 27)) + z**2*(t*x**16*(t**2*(t*(t + 8) + 20) + 7) + 2*t*x**8*y**8*(t*(t*(t*(t*(t*(132*t + 383) + 610) + 96) + 112) - 59) - 14) + t*y**16*(t*(2*t + 7)*(t*(t*(t + 8) + 8) - 6) - 63) + x**14*y**2*(t**2*(t*(t*(2*t*(t + 2)*(t + 4) + 87) + 106) + 50) + 15) + x**12*y**4*(t*(t*(t*(t*(t*(t*(25*t + 91) + 193) + 189) + 391) + 89) + 15) + 15) + x**10*y**6*(t*(t*(t*(t*(2*t*(32*t*(2*t + 7) + 127) + 809) + 296) + 62) - 2) + 21) + x**6*y**10*(t*(t*(t*(t*(2*t*(t*(100*t + 533) + 569) + 527) - 628) - 200) - 66) - 21) + x**4*y**12*(t*(t*(t*(t*(t*(t*(79*t + 437) + 1171) + 307) - 439) - 457) - 75) - 15) + x**2*y**14*(t*(t*(t*(t*(2*t*(t*(3*t + 29) + 184) + 433) - 206) - 280) - 76) - 15))) - z*(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)*(2*t**4*x**8*y**6 + 2*t**4*x**6*y**8 + 2*t**3*x**10*y**4 + 6*t**3*x**8*y**6 + 2*t**3*x**6*y**8 - 4*t**3*x**4*y**10 - 2*t**3*x**2*y**12 + t**2*x**12*y**2 + 7*t**2*x**10*y**4 - 12*t**2*x**6*y**8 - 11*t**2*x**4*y**10 - 5*t**2*x**2*y**12 + t*x**12*y**2 - t*x**10*y**4 - 4*t*x**8*y**6 - 10*t*x**6*y**8 - 13*t*x**4*y**10 - 7*t*x**2*y**12 - 2*t*y**14 + 2*t*z**12*(x**2 + 3*y**2) - 2*x**10*y**4 - 4*x**8*y**6 - 2*x**6*y**8 - 2*x**4*y**10 - 4*x**2*y**12 - 2*y**14 + z**10*(x**4*(t**2*(t + 5) + 4) + x**2*y**2*(2*t*(t*(3*t + 11) + 4) + 6) + y**4*(t*(t*(5*t + 17) + 2) + 2)) + z**8*(t*x**6*(t*(t*(t + 2) + 3) + 14) + t*y**6*(t*(t*(5*t + 16) + 13) + 6) + x**4*y**2*(t + 1)*(t*(t*(7*t + 16) + 26) + 6) + x**2*y**4*(t*(t*(t*(11*t + 53) + 40) + 24) + 2)) + z**6*(x**8*(t*(t*(-t*(t - 3) + 12) + 3) + 3) + x**6*y**2*(t*(t*(t*(3*t + 31) + 68) + 35) + 3) + x**4*y**4*(2*t*(4*t*(2*t*(2*t + 5) + 11) + 21) - 2) + x**2*y**6*(t*(t*(t*(31*t + 47) + 44) + 19) - 1) + y**8*(t + 1)*(3*t**2*(t + 2) + 1)) + z**4*(x**10*(t*(t*(2*t + 3) + 4) + 1) + x**8*y**2*(2*t*(t*(t*(16 - 3*t) + 18) + 11) + 6) + x**6*y**4*(t*(t*(t*(8*t + 77) + 92) + 21) + 2) + x**4*y**6*(t*(t*(t*(32*t + 51) + 58) + 15) + 4) + x**2*y**8*(2*t*(t*(t*(t + 8) + 4) - 1) + 6) - y**10*(t*(t + 2)*(4*t - 1) + 1)) + z**2*(t*x**12*(t + 1) + 2*t*x**6*y**6*(t*(t*(7*t + 10) + 9) + 4) - t*y**12*(t*(2*t + 5) + 7) + x**10*y**2*(t*(t*(4*t + 11) + 8) + 3) + x**8*y**4*(t*(t*(t*(35 - 3*t) + 28) + 8) + 2) + x**4*y**8*(t**2*(t*(t + 9) - 26) + 6) - x**2*y**10*(t*(t*(16*t + 17) + 4) + 1))) - (t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)**(3/2)*(2*t*y**2*(t + 1)*(-x + y)*(x + y)*(x**2 + y**2)**3*(t*x**2 + y**2) + 2*t*z**10*(x**2*(t + 4) + y**2*(3*t + 4)) + 2*t*z**8*(x**4*(2*t*(t + 3) + 2) + x**2*y**2*(5*t*(2*t + 3) + 1) + y**4*(t*(4*t + 7) + 9)) + 2*t*z**4*(x**2 + y**2)*(x**6*(t**2*(t + 2) + 2) + x**4*y**2*(t*(t*(11*t + 7) - 6) - 1) + x**2*y**4*(t*(t*(5*t + 13) + 14) - 1) + y**6*(-t*(t - 4)*(t + 2) + 16)) + 2*z**12 + 2*z**6*(t*x**4*y**2*(t*(t*(11*t + 17) + 5) + 1) + x**6*(t**2*(t + 2)**2 + 1) + x**2*y**4*(t*(t + 2)*(t*(7*t + 8) + 2) + 3) + y**6*(t*(t*(t*(5 - 3*t) + 21) + 3) + 4)) + 2*z**2*(x**2 + y**2)**2*(t**2*x**6 + t*x**4*y**2*(t*(t**2 + t - 2) - 3) - x**2*y**4*(t**2*(t*(t - 6) - 5) + 3) + y**6*(t*(t + 1)*(t + 3) + 3))))/(2*(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)**(7/2)) + (-5*t*x*z**5 - 5*t*x*z*(x**2 + y**2)*(t*y**2 + x**2) + t*y*z**4*(x*(t**2 - x*(5*t - 10)) + y**2*(5*t + 10)) + t*y*z**2*(x**3*(t**2 + t - 5*x) + x*y**2*(t**2 + 15*t*x + t - 5*x) + y**4*(5*t + 10)) - 5*x*z**3*(t*y**2*(t + 1) + x**2*(t**2 + 1)) + 5*y*z**6 + y*(t*x**2 + y**2)*(t**2*x*y**2 + x**3*(t - 5*x) + 5*y**4))/(5*t*x**4*(t + 2)*(y**2 + z**2) + 5*t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + 5*t*y**4*z**2*(t + 2) + 5*t*y**2*z**4*(t + 2) + 5*x**6 + 5*y**6 + 5*z**6),
            y*(2*mu*z*(x**18*(6*t**4 + 16*t**3 - 12*t - 6) + x**16*(t*z**2*(t*(2*t + 7)*(t*(t*(t + 8) + 8) - 6) - 63) + y**2*(t*(t*(t*(t*(t*(2*t + 23) + 102) + 46) - 82) - 49) - 6)) + x**14*(t*y**4*(t*(t*(t*(3*t + 16)*(t*(t + 10) + 14) - 77) - 170) - 84) + y**2*z**2*(t*(t*(t*(t*(2*t*(t*(3*t + 29) + 184) + 433) - 206) - 280) - 76) - 15) + z**4*(t*(t*(t*(t*(t*(t*(3*t + 28) + 116) + 171) - 7) - 164) + 24) - 27)) + x**12*(y**6*(t*(t*(t*(t*(t*(t*(31*t + 184) + 406) + 156) - 173) - 204) - 52) - 12) + y**4*z**2*(t*(t*(t*(t*(t*(t*(79*t + 437) + 1171) + 307) - 439) - 457) - 75) - 15) + y**2*z**4*(t*(t*(t*(t*(t*(t*(59*t + 326) + 858) + 325) - 271) - 186) - 82) - 21) + z**6*(t*(t*(t*(t*(t*(t*(11*t + 73) + 185) + 74) - 67) + 171) - 141) + 30)) + x**10*(y**8*(t*(t*(t*(t*(t*(68*t**2 + 286*t + 355) + 84) - 130) - 98) - 49) - 12) + y**6*z**2*(t*(t*(t*(t*(2*t*(t*(100*t + 533) + 569) + 527) - 628) - 200) - 66) - 21) + y**4*z**4*(t*(t*(t*(t*(t*(t*(179*t + 1189) + 1354) + 562) + 65) - 205) - 138) + 18) + y**2*z**6*(2*t*(t*(t*(t*(t*(t*(41*t + 189) + 270) + 239) + 255) + 31) - 32) + 30) + z**8*(t*(t*(t*(t*(11*t**2*(t + 3) + t + 105) + 325) - 157) + 207) - 21)) + x**8*(t*y**10*(t*(t*(t*(t*(8*t*(8*t + 27) + 161) + 96) + 34) - 28) - 39) + 2*t*y**8*z**2*(t*(t*(t*(t*(t*(132*t + 383) + 610) + 96) + 112) - 59) - 14) + t*y**6*z**4*(t*(t*(t*(t*(t*(139*t + 1287) + 1948) + 1012) + 521) + 181) - 48) + t*y**4*z**6*(t*(t*(t*(t*(t*(543 - 85*t) + 1167) + 1916) + 1105) + 289) + 105) + y**2*z**8*(t*(t*(t*(t*(-3*t*(19*t*(t + 3) - 68) + 1109) + 719) + 471) + 290) - 45) + z**10*(t*(t*(t*(t*(t*(-t*(17*t + 57) + 2) + 87) + 25) + 449) - 30) + 45)) + x**6*(t*z**12*(-t*(t*(t*(t*(t*(4*t + 31) + 107) + 4) - 252) - 59) + 171) + y**12*(t*(t*(t*(t*(t*(t*(25*t + 76) + 82) + 54) + 81) + 16) + 8) - 6) + y**10*z**2*(t*(t*(t*(t*(2*t*(32*t*(2*t + 7) + 127) + 809) + 296) + 62) - 2) + 21) + y**8*z**4*(t*(t*(t*(t*(t*(t*(17*t + 657) + 1468) + 1670) + 835) + 283) + 128) - 18) + y**6*z**6*(2*t*(t*(t*(t*(t*(t*(133 - 194*t) + 926) + 1317) + 858) + 243) + 62) + 30) + y**4*z**8*(t*(t*(t*(t*(t*(-4*t*(71*t + 200) + 1299) + 2096) + 1590) + 968) + 183) - 12) + y**2*z**10*(t*(t*(t*(-2*t**2*(t*(57*t + 134) + 23) + 359*t + 1222) + 782) + 30) + 51)) + x**4*(t*y**2*z**12*(t*(t*(-t*(t*(t*(4*t + 53) + 375) - 288) + 632) + 361) + 159) + y**14*(t*(t*(t*(t*(t*(t*(t + 6) + 50) + 22) - 3) + 62) + 12) - 6) + y**12*z**2*(t*(t*(t*(t*(t*(t*(25*t + 91) + 193) + 189) + 391) + 89) + 15) + 15) + y**10*z**4*(t*(t*(t*(t*(t*(t*(41*t + 37) + 874) + 982) + 563) + 467) + 78) - 18) + y**8*z**6*(t*(t*(t*(t*(t*(t*(185 - 207*t) + 1033) + 1990) + 1507) + 391) + 111) + 30) + y**6*z**8*(t*(t*(t*(t*(t*(-4*t*(50*t + 147) + 1165) + 2246) + 1562) + 708) + 117) + 30) + y**4*z**10*(2*t*(t*(t*(-t*(t*(t*(62*t + 139) + 100) - 641) + 814) + 277) + 72) + 18) + z**14*(t*(t*(-t*(2*t - 1)*(t*(2*t + 13) + 28) + 148) + 24) + 15)) + x**2*(t*y**16*(t*(t + 2)*(t*(t + 6) + 2) + 9) + 2*t*y**10*z**6*(t*(t*(t*(t*(t*(t + 58) + 246) + 226) + 331) + 110) + 36) + t*y**4*z**12*(t*(t*(t*(t*(t*(4*t - 9) - 61) + 304) + 392) + 333) + 45) + 4*t*z**16*(t*(-2*t**2 + t + 4) + 6) + y**14*z**2*(t**2*(t*(t*(2*t*(t + 2)*(t + 4) + 87) + 106) + 50) + 15) + y**12*z**4*(t*(t*(t*(t*(t*(9*t*(t + 6) + 146) + 377) + 203) + 150) + 78) - 9) + y**8*z**8*(t*(t*(t*(t*(t*(t*(t + 55) + 496) + 923) + 549) + 469) + 6) + 21) + y**6*z**10*(t*(t*(t*(t*(2*t*(t*(10 - 7*t) + 97) + 647) + 838) + 202) + 138) - 9) + y**2*z**14*(2*t*(t*(t*(78 - 31*t) + 82) + 12) + 6)) + (y**2 + z**2)*(t*y**2 + z**2)*(y**4 + y**2*z**2*(t*(t + 2) - 1) + z**4)*(4*t**2*z**10 + 4*t*y**10 + 8*t*y**6*z**4*(t*(t + 1)**2 + 1) + 4*t*y**2*z**8*(t*(t + 1)**2 + 1) + y**8*z**2*(t**2*(t*(t + 4) + 12) + 3) + y**4*z**6*(t**2*(t*(9*t + 20) + 8) + 3))) + z*(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)*(x**14*(2*t + 2) + x**12*(t*z**2*(t*(2*t + 5) + 7) + y**2*(t + 1)*(t*(2*t + 3) + 4)) + x**10*(y**4*(t*(t*(4*t + 11) + 13) + 2) + y**2*z**2*(t*(t*(16*t + 17) + 4) + 1) + z**4*(t*(t + 2)*(4*t - 1) + 1)) + x**8*(y**6*(-2*t*(t - 2) + 2)*(t*(t + 3) + 1) - y**4*z**2*(t**2*(t*(t + 9) - 26) + 6) - y**2*z**4*(2*t*(t*(t*(t + 8) + 4) - 1) + 6) - z**6*(t + 1)*(3*t**2*(t + 2) + 1)) + x**6*(-2*t*y**6*z**2*(t*(t*(7*t + 10) + 9) + 4) - t*z**8*(t*(t*(5*t + 16) + 13) + 6) + y**8*(-2*t**4 - 6*t**3 + 4*t + 4) - y**4*z**4*(t*(t*(t*(32*t + 51) + 58) + 15) + 4) - y**2*z**6*(t*(t*(t*(31*t + 47) + 44) + 19) - 1)) + x**4*(y**10*(-2*t**3 - 7*t**2 + t + 2) + y**8*z**2*(t*(t*(t*(3*t - 35) - 28) - 8) - 2) - y**6*z**4*(t*(t*(t*(8*t + 77) + 92) + 21) + 2) - y**4*z**6*(2*t*(4*t*(2*t*(2*t + 5) + 11) + 21) - 2) - y**2*z**8*(t*(t*(t*(11*t + 53) + 40) + 24) + 2) - z**10*(t*(t*(5*t + 17) + 2) + 2)) + x**2*(-t*y**12*(t + 1) - 6*t*z**12 - y**10*z**2*(t*(t*(4*t + 11) + 8) + 3) + y**8*z**4*(2*t*(t*(t*(3*t - 16) - 18) - 11) - 6) - y**6*z**6*(t*(t*(t*(3*t + 31) + 68) + 35) + 3) - y**4*z**8*(t + 1)*(t*(t*(7*t + 16) + 26) + 6) - y**2*z**10*(2*t*(t*(3*t + 11) + 4) + 6)) + y**2*z**2*(-t*y**10*(t + 1) - t*y**4*z**6*(t*(t*(t + 2) + 3) + 14) - 2*t*z**10 - y**8*z**2*(t*(t*(2*t + 3) + 4) + 1) + y**6*z**4*(t*(t*(t*(t - 3) - 12) - 3) - 3) - y**2*z**8*(t**2*(t + 5) + 4))) + (t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)**(3/2)*(2*t*x**2*(t + 1)*(x - y)*(x + y)*(x**2 + y**2)**3*(t*y**2 + x**2) + 2*t*z**10*(x**2*(3*t + 4) + y**2*(t + 4)) + 2*t*z**8*(x**4*(t*(4*t + 7) + 9) + x**2*y**2*(5*t*(2*t + 3) + 1) + y**4*(2*t*(t + 3) + 2)) + 2*t*z**4*(x**2 + y**2)*(x**6*(-t*(t - 4)*(t + 2) + 16) + x**4*y**2*(t*(t*(5*t + 13) + 14) - 1) + x**2*y**4*(t*(t*(11*t + 7) - 6) - 1) + y**6*(t**2*(t + 2) + 2)) + 2*z**12 + 2*z**6*(t*x**2*y**4*(t*(t*(11*t + 17) + 5) + 1) + x**6*(t*(t*(t*(5 - 3*t) + 21) + 3) + 4) + x**4*y**2*(t*(t + 2)*(t*(7*t + 8) + 2) + 3) + y**6*(t**2*(t + 2)**2 + 1)) + 2*z**2*(x**2 + y**2)**2*(t**2*y**6 + t*x**2*y**4*(t*(t**2 + t - 2) - 3) + x**6*(t*(t + 1)*(t + 3) + 3) - x**4*y**2*(t**2*(t*(t - 6) - 5) + 3))))/(2*(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)**(7/2)) - (y*(t*x*(y**2 + z**2) + x**3)*(t*y*(x**2 + z**2) + y**3) + (t - 5*x)*(t*x**4*(2*y**2 + z**2*(t + 2)) + t*x**2*(t*y**4 + 4*t*y**2*z**2 + z**4*(t + 2)) + x**6 + (t*y**2*z + z**3)**2)/5 + (t*y*(x**2 + z**2) + y**3)*(t*z*(x**2 + y**2) + z**3))/(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6),
            (2*mu*(x - y)*(x + y)*(-2*t**7*x**12*y**6 - 6*t**7*x**10*y**8 - 6*t**7*x**8*y**10 - 2*t**7*x**6*y**12 - t**6*x**14*y**4 - 15*t**6*x**12*y**6 - 48*t**6*x**10*y**8 - 48*t**6*x**8*y**10 - 15*t**6*x**6*y**12 - t**6*x**4*y**14 - 16*t**5*x**14*y**4 - 78*t**5*x**12*y**6 - 170*t**5*x**10*y**8 - 170*t**5*x**8*y**10 - 78*t**5*x**6*y**12 - 16*t**5*x**4*y**14 - 5*t**4*x**16*y**2 - 44*t**4*x**14*y**4 - 148*t**4*x**12*y**6 - 187*t**4*x**10*y**8 - 187*t**4*x**8*y**10 - 148*t**4*x**6*y**12 - 44*t**4*x**4*y**14 - 5*t**4*x**2*y**16 - 8*t**3*x**16*y**2 - 16*t**3*x**14*y**4 + 18*t**3*x**12*y**6 + 110*t**3*x**10*y**8 + 110*t**3*x**8*y**10 + 18*t**3*x**6*y**12 - 16*t**3*x**4*y**14 - 8*t**3*x**2*y**16 + 4*t**3*z**18 + 18*t**2*x**16*y**2 + 67*t**2*x**14*y**4 + 285*t**2*x**12*y**6 + 398*t**2*x**10*y**8 + 398*t**2*x**8*y**10 + 285*t**2*x**6*y**12 + 67*t**2*x**4*y**14 + 18*t**2*x**2*y**16 + 4*t**2*z**16*(t + 2)*(2*t**2 + 1)*(x**2 + y**2) + 4*t*x**18 + 16*t*x**16*y**2 + 124*t*x**14*y**4 + 210*t*x**12*y**6 + 326*t*x**10*y**8 + 326*t*x**8*y**10 + 210*t*x**6*y**12 + 124*t*x**4*y**14 + 16*t*x**2*y**16 + 4*t*y**18 + t*z**14*(x**4*(t*(t*(t*(t*(4*t*(t + 4) + 33) + 48) + 32) + 4) + 7) + x**2*y**2*(2*t**2*(t*(t*(2*t + 1)*(2*t + 7) + 90) + 16) + 22) + y**4*(t*(t*(t*(t*(4*t*(t + 4) + 33) + 48) + 32) + 4) + 7)) + t*z**10*(x**8*(t*(t*(t*(t*(t*(17*t + 83) + 147) + 128) + 79) + 33) + 17) + x**6*y**2*(t*(t*(t*(t*(4*t*(5*t + 37) + 627) + 688) + 166) + 368) - 1) + x**4*y**4*(2*t*(t*(t*(t*(t*(33 - 13*t) + 618) + 422) + 149) + 329) - 52) + x**2*y**6*(t*(t*(t*(t*(4*t*(5*t + 37) + 627) + 688) + 166) + 368) - 1) + y**8*(t*(t*(t*(t*(t*(17*t + 83) + 147) + 128) + 79) + 33) + 17)) + t*z**4*(x**2 + y**2)*(x**12*(t*(t*(t*(t*(t + 7) + 36) + 64) + 19) + 17) + x**10*y**2*(4*t*(-t*(t*(t*(t + 12) - 2) - 114) + 104) + 36) + x**8*y**4*(t*(t*(-t*(t*(t*(31*t + 193) + 806) - 820) + 1683) + 517) + 170) - x**6*y**6*(2*t*(t*(t*(t*(t*(29*t + 482) + 63) - 612) - 781) - 554) - 134) + x**4*y**8*(t*(t*(-t*(t*(t*(31*t + 193) + 806) - 820) + 1683) + 517) + 170) + x**2*y**10*(4*t*(-t*(t*(t*(t + 12) - 2) - 114) + 104) + 36) + y**12*(t*(t*(t*(t*(t + 7) + 36) + 64) + 19) + 17)) + 15*x**16*y**2 + 30*x**14*y**4 + 66*x**12*y**6 + 81*x**10*y**8 + 81*x**8*y**10 + 66*x**6*y**12 + 30*x**4*y**14 + 15*x**2*y**16 + z**12*(x**2 + y**2)*(x**4*(t**2*(t*(t*(t*(t*(13*t + 58) + 92) + 77) + 63) + 30) + 3) + x**2*y**2*(2*t*(t*(t*(t*(t*(-t*(t - 40) + 110) + 31) + 151) - 4) + 6) + 6) + y**4*(t**2*(t*(t*(t*(t*(13*t + 58) + 92) + 77) + 63) + 30) + 3)) + z**8*(x**2 + y**2)*(x**8*(t*(t*(t*(t*(t*(t*(9*t + 55) + 139) + 161) + 79) + 45) + 13) + 3) + x**6*y**2*(t*(t*(t*(t*(2*t*(t*(16 - 6*t) + 187) + 755) + 696) + 42) + 138) - 9) + x**4*y**4*(2*t*(t*(t*(t*(t*(-3*t*(35*t + 9) + 323) + 798) + 357) + 77) + 101) - 24) + x**2*y**6*(t*(t*(t*(t*(2*t*(t*(16 - 6*t) + 187) + 755) + 696) + 42) + 138) - 9) + y**8*(t*(t*(t*(t*(t*(t*(9*t + 55) + 139) + 161) + 79) + 45) + 13) + 3)) + z**6*(x**12*(t*(t*(t*(t*(t*(t*(t + 15) + 66) + 113) + 87) + 41) + 10) + 3) + x**10*y**2*(2*t*(t*(t*(t*(t*(t*(2*t - 3) + 20) + 384) + 396) + 189) + 8) + 24) + x**8*y**4*(t*(t*(t*(t*(t*(-t*(97*t + 723) + 340) + 2405) + 2205) + 807) + 28) + 75) + x**6*y**6*(4*t*(t*(t*(t*(t*(-t*(70*t + 327) + 217) + 835) + 726) + 267) + 5) + 108) + x**4*y**8*(t*(t*(t*(t*(t*(-t*(97*t + 723) + 340) + 2405) + 2205) + 807) + 28) + 75) + x**2*y**10*(2*t*(t*(t*(t*(t*(t*(2*t - 3) + 20) + 384) + 396) + 189) + 8) + 24) + y**12*(t*(t*(t*(t*(t*(t*(t + 15) + 66) + 113) + 87) + 41) + 10) + 3)) + z**2*(x**16*(t**2*(t*(t + 8) + 24) + 3) + x**14*y**2*(t*(t*(t*(-t*(9*t + 46) + 66) + 160) + 123) - 6) + x**12*y**4*(t*(-t*(t*(t*(t*(t*(3*t + 17) + 235) + 239) - 427) - 853) + 219) + 3) + x**10*y**6*(t*(-t*(t*(t*(t*(32*t*(t + 6) + 703) + 386) - 1534) - 1360) + 429) + 6) - x**8*y**8*(2*t*(t*(t*(t*(3*t*(t*(7*t + 69) + 167) - 62) - 741) - 931) - 261) + 12) + x**6*y**10*(t*(-t*(t*(t*(t*(32*t*(t + 6) + 703) + 386) - 1534) - 1360) + 429) + 6) + x**4*y**12*(t*(-t*(t*(t*(t*(t*(3*t + 17) + 235) + 239) - 427) - 853) + 219) + 3) + x**2*y**14*(t*(t*(t*(-t*(9*t + 46) + 66) + 160) + 123) - 6) + y**16*(t**2*(t*(t + 8) + 24) + 3))) - (x - y)*(x + y)*(2*t**2*z**12*(x**2 + y**2) + t*z**10*(x**4*(t**2*(t + 3) + 6) + x**2*y**2*(2*t**3 + 6*t**2 + 2*t + 16) + y**4*(t**2*(t + 3) + 6)) + x**2*y**2*(x**10*(3*t + 3) + x**8*y**2*(t*(2*t*(t + 4) + 15) + 5) + x**6*y**4*(2*t*(t + 2)*(4*t + 5) + 6) + x**4*y**6*(2*t*(t + 2)*(4*t + 5) + 6) + x**2*y**8*(t*(2*t*(t + 4) + 15) + 5) + y**10*(3*t + 3)) - z**8*(x**2 + y**2)*(x**4*(t**2*(t*(t - 4) - 13) - 4) + x**2*y**2*(t*(3*t*(t*(t - 7) - 10) - 16) - 6) + y**4*(t**2*(t*(t - 4) - 13) - 4)) + z**6*(t*x**8*(t*(t + 6) + 13) + t*y**8*(t*(t + 6) + 13) + x**6*y**2*(t*(t*(t*(33 - 10*t) + 74) + 37) + 6) + x**4*y**4*(2*t*(t*(t*(43 - 11*t) + 58) + 26) + 8) + x**2*y**6*(t*(t*(t*(33 - 10*t) + 74) + 37) + 6)) + z**4*(x**2 + y**2)*(t*x**4*y**4*(t*(t*(69 - 11*t) + 85) + 37) + x**8*(t*(3*t + 4) + 3) + x**6*y**2*(t*(t*(6*t + 53) + 38) + 3) + x**2*y**6*(t*(t*(6*t + 53) + 38) + 3) + y**8*(t*(3*t + 4) + 3)) + z**2*(x**12*(t + 1) + x**10*y**2*(t*(t*(2*t + 11) + 22) + 7) + x**8*y**4*(t*(3*t*(7*t + 25) + 44) + 10) + x**6*y**6*(2*t*(t*(-t*(t - 26) + 53) + 28) + 8) + x**4*y**8*(t*(3*t*(7*t + 25) + 44) + 10) + x**2*y**10*(t*(t*(2*t + 11) + 22) + 7) + y**12*(t + 1)))*(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6) - (2*t*z**11*(x**2 + y**2) + 2*t*z**7*(x**2 + y**2)*(2*t*x**2*y**2*(t*(3*t + 7) + 8) + x**4*(t*(t*(t + 3) + 3) + 3) + y**4*(t*(t*(t + 3) + 3) + 3)) + 2*t*z**5*(x**8*(t*(t*(t + 3) + 3) + 3) + x**6*y**2*(t + 1)*(t*(8*t + 19) + 5) + x**4*y**4*(6*t*(t*(5*t + 6) + 3) + 24) + x**2*y**6*(t + 1)*(t*(8*t + 19) + 5) + y**8*(t*(t*(t + 3) + 3) + 3)) + 2*t*z*(x**2 + y**2)**2*(x**8 + x**6*y**2*(t*(t + 6) + 1) + x**4*y**4*(2*t*(3*t + 2) + 4) + x**2*y**6*(t*(t + 6) + 1) + y**8) + 2*z**9*(2*t*x**2*y**2*(3*t*(t + 1) + 1) + x**4*(t**2*(t + 3) + 1) + y**4*(t**2*(t + 3) + 1)) + 2*z**3*(x**2 + y**2)*(x**8*(t**2*(t + 3) + 1) + x**6*y**2*(t*(t*(t*(t + 16) + 14) + 6) - 1) + x**4*y**4*(2*t*(t*(t*(7*t + 11) + 7) + 2) + 8) + x**2*y**6*(t*(t*(t*(t + 16) + 14) + 6) - 1) + y**8*(t**2*(t + 3) + 1)))*(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)**(3/2))/(2*(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)**(7/2)) + (5*t**2*z**4*(x**2 + y**2) + 5*t*x**4*y**2*(t + 2) + 5*t*x**2*y**4*(t + 2) + t*y*z**5*(t - 10*x) + t*y*z*(x**2 + y**2)*(x**2*(t**2 - x*(5*t + 5)) + y**2*(t - x*(5*t + 5))) + 10*t*z**2*(2*t*x**2*y**2 + x**4 + y**4) + 5*x**6 + 5*y**6 + y*z**3*(x**2*(t**2*(t + 1) - x*(10*t**2 + 5*t + 5)) + y**2*(t**3 + t - x*(10*t**2 + 5*t + 5))))/(5*t*x**4*(t + 2)*(y**2 + z**2) + 5*t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + 5*t*y**4*z**2*(t + 2) + 5*t*y**2*z**4*(t + 2) + 5*x**6 + 5*y**6 + 5*z**6)
        )),
        g=CoefficientFunction(
            0.0
        ),
        fel=CoefficientFunction((
            x*z*(mu*(-t**7*x**14*y**4 - 25*t**7*x**12*y**6 - 64*t**7*x**10*y**8 - 68*t**7*x**8*y**10 - 31*t**7*x**6*y**12 - 3*t**7*x**4*y**14 - 6*t**6*x**14*y**4 - 76*t**6*x**12*y**6 - 216*t**6*x**10*y**8 - 286*t**6*x**8*y**10 - 184*t**6*x**6*y**12 - 46*t**6*x**4*y**14 - 2*t**6*x**2*y**16 - t**5*x**16*y**2 - 50*t**5*x**14*y**4 - 82*t**5*x**12*y**6 - 161*t**5*x**10*y**8 - 355*t**5*x**8*y**10 - 406*t**5*x**6*y**12 - 202*t**5*x**4*y**14 - 23*t**5*x**2*y**16 - 8*t**4*x**16*y**2 - 22*t**4*x**14*y**4 - 54*t**4*x**12*y**6 - 96*t**4*x**10*y**8 - 84*t**4*x**8*y**10 - 156*t**4*x**6*y**12 - 224*t**4*x**4*y**14 - 102*t**4*x**2*y**16 - 6*t**4*y**18 - 14*t**3*x**16*y**2 + 3*t**3*x**14*y**4 - 81*t**3*x**12*y**6 - 34*t**3*x**10*y**8 + 130*t**3*x**8*y**10 + 173*t**3*x**6*y**12 + 77*t**3*x**4*y**14 - 46*t**3*x**2*y**16 - 16*t**3*y**18 - 4*t**2*x**18 - 4*t**2*x**16*y**2 - 62*t**2*x**14*y**4 - 16*t**2*x**12*y**6 + 28*t**2*x**10*y**8 + 98*t**2*x**8*y**10 + 204*t**2*x**6*y**12 + 170*t**2*x**4*y**14 + 82*t**2*x**2*y**16 - 4*t**2*z**18 - 9*t*x**16*y**2 - 12*t*x**14*y**4 - 8*t*x**12*y**6 + 39*t*x**10*y**8 + 49*t*x**8*y**10 + 52*t*x**6*y**12 + 84*t*x**4*y**14 + 49*t*x**2*y**16 + 12*t*y**18 - 4*t*z**16*(x**2*(2*t**3 + 5*t**2 + t + 1) + y**2*(t*(-2*t**2 + t + 4) + 6)) - t*z**12*(x**6*(t + 1)*(t*(t*(t*(t*(4*t + 25) + 62) + 54) + 6) + 17) + x**4*y**2*(t*(t*(t*(t*(t*(4*t - 9) - 61) + 304) + 392) + 333) + 45) + x**2*y**4*(t*(t*(-t*(t*(t*(4*t + 53) + 375) - 288) + 632) + 361) + 159) + y**6*(-t*(t*(t*(t*(t*(4*t + 31) + 107) + 4) - 252) - 59) + 171)) + 6*x**14*y**4 + 6*x**12*y**6 + 12*x**8*y**10 + 12*x**6*y**12 + 6*x**2*y**16 + 6*y**18 - z**14*(x**4*(t**2*(t + 2)*(t*(4*t*(t + 4) + 17) + 10) + 3) + x**2*y**2*(2*t*(t*(t*(78 - 31*t) + 82) + 12) + 6) + y**4*(t*(t*(-t*(2*t - 1)*(t*(2*t + 13) + 28) + 148) + 24) + 15)) - z**10*(x**8*(t*(t*(t*(t*(t*(t*(13*t + 71) + 146) + 137) + 75) + 49) + 10) + 3) + x**6*y**2*(t*(t*(t*(t*(2*t*(t*(10 - 7*t) + 97) + 647) + 838) + 202) + 138) - 9) + x**4*y**4*(2*t*(t*(t*(-t*(t*(t*(62*t + 139) + 100) - 641) + 814) + 277) + 72) + 18) + x**2*y**6*(t*(t*(t*(-2*t**2*(t*(57*t + 134) + 23) + 359*t + 1222) + 782) + 30) + 51) + y**8*(t*(t*(t*(t*(t*(-t*(17*t + 57) + 2) + 87) + 25) + 449) - 30) + 45)) - z**8*(x**10*(t*(t*(t*(t*(t*(t*(17*t + 79) + 131) + 121) + 103) + 37) + 13) + 3) + x**8*y**2*(t*(t*(t*(t*(t*(t*(t + 55) + 496) + 923) + 549) + 469) + 6) + 21) + x**6*y**4*(t*(t*(t*(t*(t*(-4*t*(50*t + 147) + 1165) + 2246) + 1562) + 708) + 117) + 30) + x**4*y**6*(t*(t*(t*(t*(t*(-4*t*(71*t + 200) + 1299) + 2096) + 1590) + 968) + 183) - 12) + x**2*y**8*(t*(t*(t*(t*(-3*t*(19*t*(t + 3) - 68) + 1109) + 719) + 471) + 290) - 45) + y**10*(t*(t*(t*(t*(11*t**2*(t + 3) + t + 105) + 325) - 157) + 207) - 21)) - z**6*(t*x**12*(t*(t*(3*t*(t*(t*(3*t + 13) + 25) + 32) + 71) + 29) + 17) + 2*t*x**10*y**2*(t*(t*(t*(t*(t*(t + 58) + 246) + 226) + 331) + 110) + 36) + t*x**4*y**8*(t*(t*(t*(t*(t*(543 - 85*t) + 1167) + 1916) + 1105) + 289) + 105) + x**8*y**4*(t*(t*(t*(t*(t*(t*(185 - 207*t) + 1033) + 1990) + 1507) + 391) + 111) + 30) + x**6*y**6*(2*t*(t*(t*(t*(t*(t*(133 - 194*t) + 926) + 1317) + 858) + 243) + 62) + 30) + x**2*y**10*(2*t*(t*(t*(t*(t*(t*(41*t + 189) + 270) + 239) + 255) + 31) - 32) + 30) + y**12*(t*(t*(t*(t*(t*(t*(11*t + 73) + 185) + 74) - 67) + 171) - 141) + 30)) - z**4*(t*x**6*y**8*(t*(t*(t*(t*(t*(139*t + 1287) + 1948) + 1012) + 521) + 181) - 48) + x**14*(t**2*(t + 2)*(t*(t*(t*(t + 4) + 20) + 5) + 17) + 3) + x**12*y**2*(t*(t*(t*(t*(t*(9*t*(t + 6) + 146) + 377) + 203) + 150) + 78) - 9) + x**10*y**4*(t*(t*(t*(t*(t*(t*(41*t + 37) + 874) + 982) + 563) + 467) + 78) - 18) + x**8*y**6*(t*(t*(t*(t*(t*(t*(17*t + 657) + 1468) + 1670) + 835) + 283) + 128) - 18) + x**4*y**10*(t*(t*(t*(t*(t*(t*(179*t + 1189) + 1354) + 562) + 65) - 205) - 138) + 18) + x**2*y**12*(t*(t*(t*(t*(t*(t*(59*t + 326) + 858) + 325) - 271) - 186) - 82) - 21) + y**14*(t*(t*(t*(t*(t*(t*(3*t + 28) + 116) + 171) - 7) - 164) + 24) - 27)) - z**2*(t*x**16*(t**2*(t*(t + 8) + 20) + 7) + 2*t*x**8*y**8*(t*(t*(t*(t*(t*(132*t + 383) + 610) + 96) + 112) - 59) - 14) + t*y**16*(t*(2*t + 7)*(t*(t*(t + 8) + 8) - 6) - 63) + x**14*y**2*(t**2*(t*(t*(2*t*(t + 2)*(t + 4) + 87) + 106) + 50) + 15) + x**12*y**4*(t*(t*(t*(t*(t*(t*(25*t + 91) + 193) + 189) + 391) + 89) + 15) + 15) + x**10*y**6*(t*(t*(t*(t*(2*t*(32*t*(2*t + 7) + 127) + 809) + 296) + 62) - 2) + 21) + x**6*y**10*(t*(t*(t*(t*(2*t*(t*(100*t + 533) + 569) + 527) - 628) - 200) - 66) - 21) + x**4*y**12*(t*(t*(t*(t*(t*(t*(79*t + 437) + 1171) + 307) - 439) - 457) - 75) - 15) + x**2*y**14*(t*(t*(t*(t*(2*t*(t*(3*t + 29) + 184) + 433) - 206) - 280) - 76) - 15))) - (t*(x**2 + y**2) + z**2)*(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)**3)/(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)**(7/2),
            y*z*(mu*(x**18*(6*t**4 + 16*t**3 - 12*t - 6) + x**16*(t*z**2*(t*(2*t + 7)*(t*(t*(t + 8) + 8) - 6) - 63) + y**2*(t*(t*(t*(t*(t*(2*t + 23) + 102) + 46) - 82) - 49) - 6)) + x**14*(t*y**4*(t*(t*(t*(3*t + 16)*(t*(t + 10) + 14) - 77) - 170) - 84) + y**2*z**2*(t*(t*(t*(t*(2*t*(t*(3*t + 29) + 184) + 433) - 206) - 280) - 76) - 15) + z**4*(t*(t*(t*(t*(t*(t*(3*t + 28) + 116) + 171) - 7) - 164) + 24) - 27)) + x**12*(y**6*(t*(t*(t*(t*(t*(t*(31*t + 184) + 406) + 156) - 173) - 204) - 52) - 12) + y**4*z**2*(t*(t*(t*(t*(t*(t*(79*t + 437) + 1171) + 307) - 439) - 457) - 75) - 15) + y**2*z**4*(t*(t*(t*(t*(t*(t*(59*t + 326) + 858) + 325) - 271) - 186) - 82) - 21) + z**6*(t*(t*(t*(t*(t*(t*(11*t + 73) + 185) + 74) - 67) + 171) - 141) + 30)) + x**10*(y**8*(t*(t*(t*(t*(t*(68*t**2 + 286*t + 355) + 84) - 130) - 98) - 49) - 12) + y**6*z**2*(t*(t*(t*(t*(2*t*(t*(100*t + 533) + 569) + 527) - 628) - 200) - 66) - 21) + y**4*z**4*(t*(t*(t*(t*(t*(t*(179*t + 1189) + 1354) + 562) + 65) - 205) - 138) + 18) + y**2*z**6*(2*t*(t*(t*(t*(t*(t*(41*t + 189) + 270) + 239) + 255) + 31) - 32) + 30) + z**8*(t*(t*(t*(t*(11*t**2*(t + 3) + t + 105) + 325) - 157) + 207) - 21)) + x**8*(t*y**10*(t*(t*(t*(t*(8*t*(8*t + 27) + 161) + 96) + 34) - 28) - 39) + 2*t*y**8*z**2*(t*(t*(t*(t*(t*(132*t + 383) + 610) + 96) + 112) - 59) - 14) + t*y**6*z**4*(t*(t*(t*(t*(t*(139*t + 1287) + 1948) + 1012) + 521) + 181) - 48) + t*y**4*z**6*(t*(t*(t*(t*(t*(543 - 85*t) + 1167) + 1916) + 1105) + 289) + 105) + y**2*z**8*(t*(t*(t*(t*(-3*t*(19*t*(t + 3) - 68) + 1109) + 719) + 471) + 290) - 45) + z**10*(t*(t*(t*(t*(t*(-t*(17*t + 57) + 2) + 87) + 25) + 449) - 30) + 45)) + x**6*(t*z**12*(-t*(t*(t*(t*(t*(4*t + 31) + 107) + 4) - 252) - 59) + 171) + y**12*(t*(t*(t*(t*(t*(t*(25*t + 76) + 82) + 54) + 81) + 16) + 8) - 6) + y**10*z**2*(t*(t*(t*(t*(2*t*(32*t*(2*t + 7) + 127) + 809) + 296) + 62) - 2) + 21) + y**8*z**4*(t*(t*(t*(t*(t*(t*(17*t + 657) + 1468) + 1670) + 835) + 283) + 128) - 18) + y**6*z**6*(2*t*(t*(t*(t*(t*(t*(133 - 194*t) + 926) + 1317) + 858) + 243) + 62) + 30) + y**4*z**8*(t*(t*(t*(t*(t*(-4*t*(71*t + 200) + 1299) + 2096) + 1590) + 968) + 183) - 12) + y**2*z**10*(t*(t*(t*(-2*t**2*(t*(57*t + 134) + 23) + 359*t + 1222) + 782) + 30) + 51)) + x**4*(t*y**2*z**12*(t*(t*(-t*(t*(t*(4*t + 53) + 375) - 288) + 632) + 361) + 159) + y**14*(t*(t*(t*(t*(t*(t*(t + 6) + 50) + 22) - 3) + 62) + 12) - 6) + y**12*z**2*(t*(t*(t*(t*(t*(t*(25*t + 91) + 193) + 189) + 391) + 89) + 15) + 15) + y**10*z**4*(t*(t*(t*(t*(t*(t*(41*t + 37) + 874) + 982) + 563) + 467) + 78) - 18) + y**8*z**6*(t*(t*(t*(t*(t*(t*(185 - 207*t) + 1033) + 1990) + 1507) + 391) + 111) + 30) + y**6*z**8*(t*(t*(t*(t*(t*(-4*t*(50*t + 147) + 1165) + 2246) + 1562) + 708) + 117) + 30) + y**4*z**10*(2*t*(t*(t*(-t*(t*(t*(62*t + 139) + 100) - 641) + 814) + 277) + 72) + 18) + z**14*(t*(t*(-t*(2*t - 1)*(t*(2*t + 13) + 28) + 148) + 24) + 15)) + x**2*(t*y**16*(t*(t + 2)*(t*(t + 6) + 2) + 9) + 2*t*y**10*z**6*(t*(t*(t*(t*(t*(t + 58) + 246) + 226) + 331) + 110) + 36) + t*y**4*z**12*(t*(t*(t*(t*(t*(4*t - 9) - 61) + 304) + 392) + 333) + 45) + 4*t*z**16*(t*(-2*t**2 + t + 4) + 6) + y**14*z**2*(t**2*(t*(t*(2*t*(t + 2)*(t + 4) + 87) + 106) + 50) + 15) + y**12*z**4*(t*(t*(t*(t*(t*(9*t*(t + 6) + 146) + 377) + 203) + 150) + 78) - 9) + y**8*z**8*(t*(t*(t*(t*(t*(t*(t + 55) + 496) + 923) + 549) + 469) + 6) + 21) + y**6*z**10*(t*(t*(t*(t*(2*t*(t*(10 - 7*t) + 97) + 647) + 838) + 202) + 138) - 9) + y**2*z**14*(2*t*(t*(t*(78 - 31*t) + 82) + 12) + 6)) + (y**2 + z**2)*(t*y**2 + z**2)*(y**4 + y**2*z**2*(t*(t + 2) - 1) + z**4)*(4*t**2*z**10 + 4*t*y**10 + 8*t*y**6*z**4*(t*(t + 1)**2 + 1) + 4*t*y**2*z**8*(t*(t + 1)**2 + 1) + y**8*z**2*(t**2*(t*(t + 4) + 12) + 3) + y**4*z**6*(t**2*(t*(9*t + 20) + 8) + 3))) + (t*(x**2 + y**2) + z**2)*(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)**3)/(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)**(7/2),
            (x - y)*(x + y)*(mu*(-2*t**7*x**12*y**6 - 6*t**7*x**10*y**8 - 6*t**7*x**8*y**10 - 2*t**7*x**6*y**12 - t**6*x**14*y**4 - 15*t**6*x**12*y**6 - 48*t**6*x**10*y**8 - 48*t**6*x**8*y**10 - 15*t**6*x**6*y**12 - t**6*x**4*y**14 - 16*t**5*x**14*y**4 - 78*t**5*x**12*y**6 - 170*t**5*x**10*y**8 - 170*t**5*x**8*y**10 - 78*t**5*x**6*y**12 - 16*t**5*x**4*y**14 - 5*t**4*x**16*y**2 - 44*t**4*x**14*y**4 - 148*t**4*x**12*y**6 - 187*t**4*x**10*y**8 - 187*t**4*x**8*y**10 - 148*t**4*x**6*y**12 - 44*t**4*x**4*y**14 - 5*t**4*x**2*y**16 - 8*t**3*x**16*y**2 - 16*t**3*x**14*y**4 + 18*t**3*x**12*y**6 + 110*t**3*x**10*y**8 + 110*t**3*x**8*y**10 + 18*t**3*x**6*y**12 - 16*t**3*x**4*y**14 - 8*t**3*x**2*y**16 + 4*t**3*z**18 + 18*t**2*x**16*y**2 + 67*t**2*x**14*y**4 + 285*t**2*x**12*y**6 + 398*t**2*x**10*y**8 + 398*t**2*x**8*y**10 + 285*t**2*x**6*y**12 + 67*t**2*x**4*y**14 + 18*t**2*x**2*y**16 + 4*t**2*z**16*(t + 2)*(2*t**2 + 1)*(x**2 + y**2) + 4*t*x**18 + 16*t*x**16*y**2 + 124*t*x**14*y**4 + 210*t*x**12*y**6 + 326*t*x**10*y**8 + 326*t*x**8*y**10 + 210*t*x**6*y**12 + 124*t*x**4*y**14 + 16*t*x**2*y**16 + 4*t*y**18 + t*z**14*(x**4*(t*(t*(t*(t*(4*t*(t + 4) + 33) + 48) + 32) + 4) + 7) + x**2*y**2*(2*t**2*(t*(t*(2*t + 1)*(2*t + 7) + 90) + 16) + 22) + y**4*(t*(t*(t*(t*(4*t*(t + 4) + 33) + 48) + 32) + 4) + 7)) + t*z**10*(x**8*(t*(t*(t*(t*(t*(17*t + 83) + 147) + 128) + 79) + 33) + 17) + x**6*y**2*(t*(t*(t*(t*(4*t*(5*t + 37) + 627) + 688) + 166) + 368) - 1) + x**4*y**4*(2*t*(t*(t*(t*(t*(33 - 13*t) + 618) + 422) + 149) + 329) - 52) + x**2*y**6*(t*(t*(t*(t*(4*t*(5*t + 37) + 627) + 688) + 166) + 368) - 1) + y**8*(t*(t*(t*(t*(t*(17*t + 83) + 147) + 128) + 79) + 33) + 17)) + t*z**4*(x**2 + y**2)*(x**12*(t*(t*(t*(t*(t + 7) + 36) + 64) + 19) + 17) + x**10*y**2*(4*t*(-t*(t*(t*(t + 12) - 2) - 114) + 104) + 36) + x**8*y**4*(t*(t*(-t*(t*(t*(31*t + 193) + 806) - 820) + 1683) + 517) + 170) - x**6*y**6*(2*t*(t*(t*(t*(t*(29*t + 482) + 63) - 612) - 781) - 554) - 134) + x**4*y**8*(t*(t*(-t*(t*(t*(31*t + 193) + 806) - 820) + 1683) + 517) + 170) + x**2*y**10*(4*t*(-t*(t*(t*(t + 12) - 2) - 114) + 104) + 36) + y**12*(t*(t*(t*(t*(t + 7) + 36) + 64) + 19) + 17)) + 15*x**16*y**2 + 30*x**14*y**4 + 66*x**12*y**6 + 81*x**10*y**8 + 81*x**8*y**10 + 66*x**6*y**12 + 30*x**4*y**14 + 15*x**2*y**16 + z**12*(x**2 + y**2)*(x**4*(t**2*(t*(t*(t*(t*(13*t + 58) + 92) + 77) + 63) + 30) + 3) + x**2*y**2*(2*t*(t*(t*(t*(t*(-t*(t - 40) + 110) + 31) + 151) - 4) + 6) + 6) + y**4*(t**2*(t*(t*(t*(t*(13*t + 58) + 92) + 77) + 63) + 30) + 3)) + z**8*(x**2 + y**2)*(x**8*(t*(t*(t*(t*(t*(t*(9*t + 55) + 139) + 161) + 79) + 45) + 13) + 3) + x**6*y**2*(t*(t*(t*(t*(2*t*(t*(16 - 6*t) + 187) + 755) + 696) + 42) + 138) - 9) + x**4*y**4*(2*t*(t*(t*(t*(t*(-3*t*(35*t + 9) + 323) + 798) + 357) + 77) + 101) - 24) + x**2*y**6*(t*(t*(t*(t*(2*t*(t*(16 - 6*t) + 187) + 755) + 696) + 42) + 138) - 9) + y**8*(t*(t*(t*(t*(t*(t*(9*t + 55) + 139) + 161) + 79) + 45) + 13) + 3)) + z**6*(x**12*(t*(t*(t*(t*(t*(t*(t + 15) + 66) + 113) + 87) + 41) + 10) + 3) + x**10*y**2*(2*t*(t*(t*(t*(t*(t*(2*t - 3) + 20) + 384) + 396) + 189) + 8) + 24) + x**8*y**4*(t*(t*(t*(t*(t*(-t*(97*t + 723) + 340) + 2405) + 2205) + 807) + 28) + 75) + x**6*y**6*(4*t*(t*(t*(t*(t*(-t*(70*t + 327) + 217) + 835) + 726) + 267) + 5) + 108) + x**4*y**8*(t*(t*(t*(t*(t*(-t*(97*t + 723) + 340) + 2405) + 2205) + 807) + 28) + 75) + x**2*y**10*(2*t*(t*(t*(t*(t*(t*(2*t - 3) + 20) + 384) + 396) + 189) + 8) + 24) + y**12*(t*(t*(t*(t*(t*(t*(t + 15) + 66) + 113) + 87) + 41) + 10) + 3)) + z**2*(x**16*(t**2*(t*(t + 8) + 24) + 3) + x**14*y**2*(t*(t*(t*(-t*(9*t + 46) + 66) + 160) + 123) - 6) + x**12*y**4*(t*(-t*(t*(t*(t*(t*(3*t + 17) + 235) + 239) - 427) - 853) + 219) + 3) + x**10*y**6*(t*(-t*(t*(t*(t*(32*t*(t + 6) + 703) + 386) - 1534) - 1360) + 429) + 6) - x**8*y**8*(2*t*(t*(t*(t*(3*t*(t*(7*t + 69) + 167) - 62) - 741) - 931) - 261) + 12) + x**6*y**10*(t*(-t*(t*(t*(t*(32*t*(t + 6) + 703) + 386) - 1534) - 1360) + 429) + 6) + x**4*y**12*(t*(-t*(t*(t*(t*(t*(3*t + 17) + 235) + 239) - 427) - 853) + 219) + 3) + x**2*y**14*(t*(t*(t*(-t*(9*t + 46) + 66) + 160) + 123) - 6) + y**16*(t**2*(t*(t + 8) + 24) + 3))) + (t*z**2 + x**2 + y**2)*(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)**3)/(t*x**4*(t + 2)*(y**2 + z**2) + t*x**2*(6*t*y**2*z**2 + y**4*(t + 2) + z**4*(t + 2)) + t*y**4*z**2*(t + 2) + t*y**2*z**4*(t + 2) + x**6 + y**6 + z**6)**(7/2)
        ))
    )
else:
    print("Incorrect test name.")
    exit(1)

order = 2
time_order = 2
bbox_sz = 2.0
unif_ref = 3
max_nref = 4

sns.set()
tfinal = 1.0

plt_out = True
l2us = []
h1us = []
l2ps = []
h1ps = []

for nref in range(max_nref):
    exact.set_time(0.0)
    mesh = background_mesh(unif_ref=unif_ref, bbox_sz=bbox_sz)
    h = bbox_sz * 2 ** (1 - unif_ref - nref)
    dt = h ** (order / time_order) / 4

    c_delta = time_order + 0.1
    band = maxvel * (tfinal + c_delta * dt)
    miniband = c_delta * dt * maxvel
    refine_around_lset(mesh, nref, exact.phi, band, miniband, band_type=band_type)

    if mode == 'advect-nonsol':
        ndof, ts, l2uss, h1uss, l2pss, h1pss = moving_ns_direct(
            mesh=mesh, dt=dt, order=2, tfinal=tfinal, exact=exact, band=miniband, time_order=2, out=False, fname=mode
        )
    else:
        ndof, ts, l2uss, h1uss, l2pss, h1pss = moving_ns(
            mesh=mesh, dt=dt, order=2, tfinal=tfinal, exact=exact, band=miniband, time_order=2, out=False, fname=mode
        )

    l2u = np.sqrt(sci.simps(y=np.array(l2uss) ** 2, x=ts, dx=dt, even='avg'))
    h1u = np.sqrt(sci.simps(y=np.array(h1uss) ** 2, x=ts, dx=dt, even='avg'))
    l2p = np.sqrt(sci.simps(y=np.array(l2pss) ** 2, x=ts, dx=dt, even='avg'))
    h1p = np.sqrt(sci.simps(y=np.array(h1pss) ** 2, x=ts, dx=dt, even='avg'))

    if plt_out:
        fig, axs = plt.subplots(2, 2)

        fig.set_figwidth(20)
        fig.set_figheight(15)

        plt.suptitle(rf"h={h:.3E}, dt=h/4")

        axs[0, 0].plot(ts, l2uss)
        axs[0, 0].set_title(rf"$L^2$-error in $\mathbf{{u}}$")
        axs[0, 0].set_ylim(0.0)

        axs[0, 1].plot(ts, h1uss)
        axs[0, 1].set_title(rf"$H^1$-error in $\mathbf{{u}}$")
        axs[0, 1].set_ylim(0.0)

        axs[1, 0].plot(ts, l2pss)
        axs[1, 0].set_title(rf"$L^2$-error in $p$")
        axs[1, 0].set_ylim(0.0)

        axs[1, 1].plot(ts, h1pss)
        axs[1, 1].set_title(rf"$H^1$-error in $p$")
        axs[1, 1].set_ylim(0.0)

        plt.show()

    if len(l2us) > 0:
        msg = f"{ndof:.2E} & {np.log2(l2us[-1] / l2u):.2f} & {l2u:.2E} & {np.log2(h1us[-1] / h1u):.2f} & {h1u:.2E} & {np.log2(l2ps[-1] / l2p):.2f} & {l2p:.2E} & {np.log2(h1ps[-1] / h1p):.2f} & {h1p:.2E}"
        print(msg)
    else:
        msg = f"{ndof:.2E} &      & {l2u:.2E} &      & {h1u:.2E} &      & {l2p:.2E} &      & {h1p:.2E}"
        print(msg)

    l2us.append(l2u)
    h1us.append(h1u)
    l2ps.append(l2p)
    h1ps.append(h1p)
