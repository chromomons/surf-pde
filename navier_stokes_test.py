from stokes_solvers import *
import numpy as np
from utils import *
from ngsolve import SetNumThreads
import pandas as pd
import scipy.integrate as sci
import json

SetNumThreads(16)

f = open(f"./input/input_ns.json")
params = json.load(f)

mode = params['mode']
nu = params['nu']
order = params['order']
unif_ref = params['unif_ref']
max_nref = params['max_nref']
fname = params['fname']
printrates = params['printrates']

# EXACT QUANTITIES

alpha = 0.0
bbox_sz = 1.0

if mode == 'reu_circ':
    exact = {
        "name": mode,
        "nu": nu,
        "phi": sqrt(x * x + y * y + z * z) - 1,
        "u1": -z * (x ** 2 + 15 * y * z) / sqrt(x ** 2 + y ** 2 + z ** 2),
        "u2": x * z * (2 * y + 15 * z) / sqrt(x ** 2 + y ** 2 + z ** 2),
        "u3": (x ** 3 - 2 * x * y ** 2) / sqrt(x ** 2 + y ** 2 + z ** 2),
        "p": x * x * x + x * y * z,
        "f1": (-alpha * x ** 4 * z + x ** 2 * (y ** 2 * (-alpha * z + 3 * sqrt(x ** 2 + y ** 2 + z ** 2)) + y * (
                    -15 * alpha * z ** 2 - 2 * z * sqrt(x ** 2 + y ** 2 + z ** 2) + 15) - z * (
                                                           alpha * z ** 2 - 3 * z * sqrt(
                                                       x ** 2 + y ** 2 + z ** 2) + 4)) + y ** 3 * (
                           z * (-15 * alpha * z + sqrt(x ** 2 + y ** 2 + z ** 2)) + 15) + y ** 2 * z + y * z ** 2 * (
                           z * (-15 * alpha * z + sqrt(x ** 2 + y ** 2 + z ** 2)) - 60) + z ** 3) / (
                          x ** 2 + y ** 2 + z ** 2) ** (3 / 2),
        "f2": x * (x ** 2 * (
                    alpha * z * (2 * y + 15 * z) + (-3 * y + z) * sqrt(x ** 2 + y ** 2 + z ** 2) - 15) + 5 * y * (
                               -3 * y + 2 * z) + z * (
                               alpha * (2 * y + 15 * z) * (y ** 2 + z ** 2) + 60 * z + (-2 * y ** 2 + z ** 2) * sqrt(
                           x ** 2 + y ** 2 + z ** 2))) / (x ** 2 + y ** 2 + z ** 2) ** (3 / 2),
        "f3": x * (alpha * x ** 4 + x ** 2 * (
                    alpha * (-y ** 2 + z ** 2) + (y - 3 * z) * sqrt(x ** 2 + y ** 2 + z ** 2) + 4) - 11 * y ** 2 + y * (
                               -2 * alpha * y * (y ** 2 + z ** 2) + (y ** 2 - 2 * z ** 2) * sqrt(
                           x ** 2 + y ** 2 + z ** 2)) - z ** 2) / (x ** 2 + y ** 2 + z ** 2) ** (3 / 2),
        "g": 0,
        "conv1": (x**5*(-3*y**2 - 30*y*z + 2*z**2) + 2*x**3*(3*y**4 + 15*y**3*z + 4*y**2*z**2 + 30*y*z**3 + z**4) + 15*x*(4*y**5*z + 4*y**3*z**3 - 15*z**6))/(x**2 + y**2 + z**2)**2,
        "conv2": (3*x**6*(y + 10*z) + x**4*(-6*y**3 - 30*y**2*z + 5*y*z**2 + 45*z**3) + x**2*z*(-60*y**4 + 2*y**3*z + 15*y**2*z**2 + 2*y*z**3 + 15*z**4) - 15*y*z**3*(2*y**3 + 2*y*z**2 + 15*z**3))/(x**2 + y**2 + z**2)**2,
        "conv3": z*(-2*x**6 - x**4*(13*y**2 + 105*y*z + 2*z**2) - x**2*(2*y**4 + 75*y**3*z + 2*y**2*z**2 + 15*y*z**3 - 225*z**4) + 15*y**2*z*(2*y**3 + 2*y*z**2 + 15*z**3))/(x**2 + y**2 + z**2)**2
    }
elif mode == 'reu_torus':
    r = 1./3
    R = 2./3
    exact = {
        "name": mode,
        "nu": nu,
        "phi": (sqrt(x*x + y*y) - R)**2 + z*z - r*r,
        "u1": -z*(-15*R*y*z + sqrt(x**2 + y**2)*(x**2 + 15*y*z))/(sqrt(x**2 + y**2)*sqrt(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)),
        "u2": x*z*(-15*R*z + sqrt(x**2 + y**2)*(2*y + 15*z))/(sqrt(x**2 + y**2)*sqrt(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)),
        "u3": x*(-R + sqrt(x**2 + y**2))*(x**2 - 2*y**2)/(sqrt(x**2 + y**2)*sqrt(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)),
        "p": x*x*x + x*y*z,
        "f1": -alpha*z*(-15*R*y*z + sqrt(x**2 + y**2)*(x**2 + 15*y*z))/(sqrt(x**2 + y**2)*sqrt(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)) - (30*R**13*y*(x**2 + y**2)**(5/2) + R**12*(x**2 + y**2)*(15*y*z**2*(x**2 + y**2) - 390*y*(x**2 + y**2)**2 + z*(x**2 - 2*y**2)*(7*x**2 + y**2)) + R**11*(x**2 + y**2)**(3/2)*(-15*y*z**4 - 135*y*z**2*(x**2 + y**2) + 2340*y*(x**2 + y**2)**2 + z*(-85*x**4 + 140*x**2*y**2 + 24*y**4)) + R**10*(x**2 + y**2)*(225*y*z**4*(x**2 + y**2) + 495*y*z**2*(x**2 + y**2)**2 - 8580*y*(x**2 + y**2)**3 + z**3*(33*x**4 - 69*x**2*y**2 - 12*y**4) + z*(x**2 + y**2)*(473*x**4 - 679*x**2*y**2 - 132*y**4)) + 5*R**9*(x**2 + y**2)**(3/2)*(-15*y*z**6 - 330*y*z**4*(x**2 + y**2) - 165*y*z**2*(x**2 + y**2)**2 + 4290*y*(x**2 + y**2)**3 + z**3*(-67*x**4 + 122*x**2*y**2 + 24*y**4) + z*(x**2 + y**2)*(-319*x**4 + 390*x**2*y**2 + 88*y**4)) + 30*R**8*(x**2 + y**2)*(25*y*z**6*(x**2 + y**2) + 240*y*z**4*(x**2 + y**2)**2 - 1287*y*(x**2 + y**2)**4 - z**5*(-2*x**4 + 5*x**2*y**2 + y**4) + z**3*(x**2 + y**2)*(51*x**4 - 79*x**2*y**2 - 18*y**4) + z*(x**2 + y**2)**2*(121*x**4 - 122*x**2*y**2 - 33*y**4)) + 2*R**7*(x**2 + y**2)**(3/2)*(-75*y*z**8 - 2025*y*z**6*(x**2 + y**2) - 10125*y*z**4*(x**2 + y**2)**2 + 1485*y*z**2*(x**2 + y**2)**3 + 25740*y*(x**2 + y**2)**4 + z**5*(-245*x**4 + 520*x**2*y**2 + 120*y**4) + z**3*(30*x**2 + 30*y**2)*(-69*x**4 + 88*x**2*y**2 + 24*y**4) + 3*z*(x**2 + y**2)**2*(-979*x**4 + 776*x**2*y**2 + 264*y**4)) + 2*R**6*(x**2 + y**2)*(525*y*z**8*(x**2 + y**2) + 6825*y*z**6*(x**2 + y**2)**2 + 19215*y*z**4*(x**2 + y**2)**3 - 3465*y*z**2*(x**2 + y**2)**4 - 25740*y*(x**2 + y**2)**5 + z**7*(25*x**4 - 85*x**2*y**2 - 20*y**4) + z**5*(5*x**2 + 5*y**2)*(175*x**4 - 305*x**2*y**2 - 84*y**4) + 105*z**3*(x**2 + y**2)**2*(35*x**4 - 35*x**2*y**2 - 12*y**4) + 21*z*(x**2 + y**2)**3*(165*x**4 - 95*x**2*y**2 - 44*y**4)) + 2*R**5*(x**2 + y**2)**(3/2)*(-75*y*z**10 - 2025*y*z**8*(x**2 + y**2) - 14700*y*z**6*(x**2 + y**2)**2 - 25200*y*z**4*(x**2 + y**2)**3 + 4455*y*z**2*(x**2 + y**2)**4 + 19305*y*(x**2 + y**2)**5 + z**7*(-155*x**4 + 430*x**2*y**2 + 120*y**4) + z**5*(-17*x**2 + 28*y**2)*(7*x**2 + 2*y**2)*(15*x**2 + 15*y**2) + 21*z**3*(x**2 + y**2)**2*(-213*x**4 + 154*x**2*y**2 + 72*y**4) + 3*z*(x**2 + y**2)**3*(-1001*x**4 + 358*x**2*y**2 + 264*y**4)) + 5*R**4*(x**2 + y**2)*(135*y*z**10*(x**2 + y**2) + 1950*y*z**8*(x**2 + y**2)**2 + 8190*y*z**6*(x**2 + y**2)**3 + 9180*y*z**4*(x**2 + y**2)**4 - 1485*y*z**2*(x**2 + y**2)**5 - 4290*y*(x**2 + y**2)**6 + z**9*(3*x**4 - 21*x**2*y**2 - 6*y**4) + z**7*(8*x**2 + 8*y**2)*(20*x**4 - 43*x**2*y**2 - 15*y**4) + 10*z**5*(x**2 + y**2)**2*(91*x**4 - 89*x**2*y**2 - 42*y**4) + 168*z**3*(x**2 + y**2)**3*(9*x**4 - 4*x**2*y**2 - 3*y**4) + 3*z*(x**2 + y**2)**4*(253*x**4 - 35*x**2*y**2 - 66*y**4)) + 5*R**3*(x**2 + y**2)**(3/2)*(x**2 + y**2 + z**2)**2*(-15*y*z**8 - 309*y*z**6*(x**2 + y**2) - 2217*y*z**4*(x**2 + y**2)**2 - 2607*y*z**2*(x**2 + y**2)**3 + 1716*y*(x**2 + y**2)**4 + z**5*(-13*x**4 + 68*x**2*y**2 + 24*y**4) + z**3*(2*x**2 + 2*y**2)*(-97*x**4 + 100*x**2*y**2 + 56*y**4) + z*(x**2 + y**2)**2*(-341*x**4 - 28*x**2*y**2 + 88*y**4)) - R**2*(x**2 + y**2)*(x**2 + y**2 + z**2)**3*(-165*y*z**6*(x**2 + y**2) - 2040*y*z**4*(x**2 + y**2)**2 - 5535*y*z**2*(x**2 + y**2)**3 + 2340*y*(x**2 + y**2)**4 + z**5*(3*x**4 + 33*x**2*y**2 + 12*y**4) + z**3*(6*x**2 + 6*y**2)*(-19*x**4 + 46*x**2*y**2 + 24*y**4) + z*(x**2 + y**2)**2*(-517*x**4 - 157*x**2*y**2 + 132*y**4)) + R*(x**2 + y**2)**(3/2)*(x**2 + y**2 + z**2)**4*(-15*y*z**6 - 150*y*z**4*(x**2 + y**2) - 1245*y*z**2*(x**2 + y**2)**2 + 390*y*(x**2 + y**2)**3 + z**3*(5*x**4 + 50*x**2*y**2 + 24*y**4) + z*(x**2 + y**2)*(-95*x**4 - 50*x**2*y**2 + 24*y**4)) - 2*(x**2 + y**2)**3*(x**2 + y**2 + z**2)**5*(-60*y*z**2 + 15*y*(x**2 + y**2) + z**3 + z*(-4*x**2 + y**2)))/(2*(x**2 + y**2)**3*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)**(13/2)) - (R**2*y*sqrt(x**2 + y**2)*(x**2*(-3*y + z) - y**2*z) + R*y*(x**2 + y**2)*(x**2*(6*y - 3*z) + 2*y**2*z) - (x**2 + y**2)**(3/2)*(x**2*(3*y**2 - 2*y*z + 3*z**2) + y*z*(y**2 + z**2)))/((x**2 + y**2)**(3/2)*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)),
        "f2": -x*(-30*R**13*(x**2 + y**2)**(5/2) + 3*R**12*(x**2 + y**2)*(-6*y**3*z - z**2*(5*x**2 + 5*y**2) + 130*(x**2 + y**2)**2) - R**11*(x**2 + y**2)**(3/2)*(-y*z*(17*x**2 + 218*y**2) - 15*z**4 - z**2*(135*x**2 + 135*y**2) + 2340*(x**2 + y**2)**2) + 5*R**10*(x**2 + y**2)*(-18*y**3*z**3 - 2*y*z*(x**2 + y**2)*(19*x**2 + 121*y**2) - z**4*(45*x**2 + 45*y**2) - 99*z**2*(x**2 + y**2)**2 + 1716*(x**2 + y**2)**3) - 5*R**9*(x**2 + y**2)**(3/2)*(-y*z**3*(17*x**2 + 182*y**2) - y*z*(x**2 + y**2)*(193*x**2 + 814*y**2) - 15*z**6 - z**4*(330*x**2 + 330*y**2) - 165*z**2*(x**2 + y**2)**2 + 4290*(x**2 + y**2)**3) + 30*R**8*(x**2 + y**2)*(-6*y**3*z**5 - 2*y*z**3*(x**2 + y**2)*(13*x**2 + 69*y**2) - 14*y*z*(x**2 + y**2)**2*(7*x**2 + 22*y**2) - z**6*(25*x**2 + 25*y**2) - 240*z**4*(x**2 + y**2)**2 + 1287*(x**2 + y**2)**4) - 2*R**7*(x**2 + y**2)**(3/2)*(-5*y*z**5*(17*x**2 + 146*y**2) - 30*y*z**3*(x**2 + y**2)*(53*x**2 + 186*y**2) - 3*y*z*(x**2 + y**2)**2*(995*x**2 + 2486*y**2) - 75*z**8 - z**6*(2025*x**2 + 2025*y**2) - 10125*z**4*(x**2 + y**2)**2 + 1485*z**2*(x**2 + y**2)**3 + 25740*(x**2 + y**2)**4) + 2*R**6*(x**2 + y**2)*(-90*y**3*z**7 - 10*y*z**5*(x**2 + y**2)*(61*x**2 + 259*y**2) - 210*y*z**3*(x**2 + y**2)**2*(18*x**2 + 47*y**2) - 42*y*z*(x**2 + y**2)**3*(101*x**2 + 209*y**2) - z**8*(525*x**2 + 525*y**2) - 6825*z**6*(x**2 + y**2)**2 - 19215*z**4*(x**2 + y**2)**3 + 3465*z**2*(x**2 + y**2)**4 + 25740*(x**2 + y**2)**5) - 10*R**5*(x**2 + y**2)**(3/2)*(-y*z**7*(17*x**2 + 110*y**2) - 75*y*z**5*(x**2 + y**2)*(5*x**2 + 14*y**2) - 21*y*z**3*(x**2 + y**2)**2*(55*x**2 + 114*y**2) - 3*y*z*(x**2 + y**2)**3*(287*x**2 + 506*y**2) - 15*z**10 - z**8*(405*x**2 + 405*y**2) - 2940*z**6*(x**2 + y**2)**2 - 5040*z**4*(x**2 + y**2)**3 + 891*z**2*(x**2 + y**2)**4 + 3861*(x**2 + y**2)**5) + 5*R**4*(x**2 + y**2)*(-18*y**3*z**9 - 16*y*z**7*(x**2 + y**2)*(11*x**2 + 35*y**2) - 20*y*z**5*(x**2 + y**2)**2*(64*x**2 + 133*y**2) - 336*y*z**3*(x**2 + y**2)**3*(7*x**2 + 12*y**2) - 6*y*z*(x**2 + y**2)**4*(208*x**2 + 319*y**2) - z**10*(135*x**2 + 135*y**2) - 1950*z**8*(x**2 + y**2)**2 - 8190*z**6*(x**2 + y**2)**3 - 9180*z**4*(x**2 + y**2)**4 + 1485*z**2*(x**2 + y**2)**5 + 4290*(x**2 + y**2)**6) - 5*R**3*(x**2 + y**2)**(3/2)*(x**2 + y**2 + z**2)**2*(-y*z**5*(17*x**2 + 74*y**2) - 6*y*z**3*(x**2 + y**2)*(55*x**2 + 102*y**2) - 3*y*z*(x**2 + y**2)**2*(211*x**2 + 286*y**2) - 15*z**8 - z**6*(309*x**2 + 309*y**2) - 2217*z**4*(x**2 + y**2)**2 - 2607*z**2*(x**2 + y**2)**3 + 1716*(x**2 + y**2)**4) + R**2*(x**2 + y**2)*(x**2 + y**2 + z**2)**3*(-18*y**3*z**5 - 6*y*z**3*(x**2 + y**2)*(45*x**2 + 86*y**2) - 2*y*z*(x**2 + y**2)**2*(535*x**2 + 649*y**2) - z**6*(165*x**2 + 165*y**2) - 2040*z**4*(x**2 + y**2)**2 - 5535*z**2*(x**2 + y**2)**3 + 2340*(x**2 + y**2)**4) - R*(x**2 + y**2)**(3/2)*(x**2 + y**2 + z**2)**4*(-y*z**3*(17*x**2 + 38*y**2) - 7*y*z*(x**2 + y**2)*(31*x**2 + 34*y**2) - 15*z**6 - z**4*(150*x**2 + 150*y**2) - 1245*z**2*(x**2 + y**2)**2 + 390*(x**2 + y**2)**3) + 2*alpha*z*(x**2 + y**2)**(5/2)*(15*R*z - sqrt(x**2 + y**2)*(2*y + 15*z))*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)**6 + 2*(x**2 + y**2)**(3/2)*(R**2*sqrt(x**2 + y**2)*(x**2*(3*y - z) + y**2*z) - R*(x**2 + y**2)*(x**2*(6*y - 2*z) + 3*y**2*z) + (x**2 + y**2)**(3/2)*(x**2*(3*y - z) + 2*y**2*z - z**3))*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)**(11/2) + 10*(x**2 + y**2)**3*(x**2 + y**2 + z**2)**5*(3*x**2 + 3*y**2 - 2*y*z - 12*z**2))/(2*(x**2 + y**2)**3*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)**(13/2)),
        "f3": x*(R**15*(-7*x**2 + 20*y**2) + 2*R**14*sqrt(x**2 + y**2)*(53*x**2 - 151*y**2) + R**13*(-749*x**4 + x**2*(1379*y**2 - 40*z**2) + 2128*y**4 + 122*y**2*z**2) + 2*R**12*sqrt(x**2 + y**2)*(z**2*(263*x**2 - 799*y**2) + (x**2 + y**2)*(1638*x**2 - 4641*y**2)) + R**11*(z**4*(-93*x**2 + 312*y**2) - z**2*(x**2 + y**2)*(3192*x**2 - 9660*y**2) + (-9919*x**2 + 28028*y**2)*(x**2 + y**2)**2) + 2*R**10*sqrt(x**2 + y**2)*(z**4*(519*x**2 - 1731*y**2) + z**2*(x**2 + y**2)*(5918*x**2 - 17842*y**2) + (x**2 + y**2)**2*(11011*x**2 - 31031*y**2)) + R**9*(z**6*(-110*x**2 + 430*y**2) - z**4*(x**2 + y**2)*(5265*x**2 - 17460*y**2) - z**2*(x**2 + y**2)**2*(29920*x**2 - 89870*y**2) + (-37037*x**2 + 104104*y**2)*(x**2 + y**2)**3) + 2*R**8*sqrt(x**2 + y**2)*(z**6*(505*x**2 - 1955*y**2) + z**4*(x**2 + y**2)*(8010*x**2 - 26415*y**2) + z**2*(x**2 + y**2)**2*(27225*x**2 - 81477*y**2) + (x**2 + y**2)**3*(24024*x**2 - 67353*y**2)) + R**7*(z**8*(-65*x**2 + 340*y**2) - z**6*(x**2 + y**2)*(4120*x**2 - 15800*y**2) - z**4*(x**2 + y**2)**2*(32490*x**2 - 106560*y**2) - z**2*(x**2 + y**2)**3*(73392*x**2 - 218856*y**2) + (-48477*x**2 + 135564*y**2)*(x**2 + y**2)**4) + 2*R**6*sqrt(x**2 + y**2)*(z**8*(235*x**2 - 1205*y**2) + z**6*(x**2 + y**2)*(4900*x**2 - 18620*y**2) + z**4*(x**2 + y**2)**2*(23058*x**2 - 75222*y**2) + z**2*(x**2 + y**2)**3*(37092*x**2 - 110220*y**2) + (x**2 + y**2)**4*(19019*x**2 - 53053*y**2)) + R**5*(z**10*(-12*x**2 + 150*y**2) - z**8*(x**2 + y**2)*(1455*x**2 - 7320*y**2) - z**6*(x**2 + y**2)**2*(14980*x**2 - 56420*y**2) - z**4*(x**2 + y**2)**3*(46746*x**2 - 151704*y**2) - z**2*(x**2 + y**2)**4*(56232*x**2 - 166518*y**2) + (-23023*x**2 + 64064*y**2)*(x**2 + y**2)**5) + 2*R**4*sqrt(x**2 + y**2)*(x**2 + y**2 + z**2)**2*(z**6*(33*x**2 - 381*y**2) + z**4*(x**2 + y**2)*(1184*x**2 - 5413*y**2) + z**2*(x**2 + y**2)**2*(5229*x**2 - 17283*y**2) + (x**2 + y**2)**3*(5278*x**2 - 14651*y**2)) - R**3*(x**2 + y**2 + z**2)**3*(-z**6*(5*x**2 + 32*y**2) + z**4*(x**2 + y**2)*(159*x**2 - 1452*y**2) + z**2*(x**2 + y**2)**2*(2113*x**2 - 8048*y**2) + (x**2 + y**2)**3*(3549*x**2 - 9828*y**2)) + 2*R**2*sqrt(x**2 + y**2)*(x**2 + y**2 + z**2)**4*(-z**4*(7*x**2 + 49*y**2) + z**2*(x**2 + y**2)*(106*x**2 - 590*y**2) + (x**2 + y**2)**2*(413*x**2 - 1141*y**2)) - R*(x**2 + y**2)*(x**2 + y**2 + z**2)**5*(119*x**4 - x**2*(209*y**2 + 3*z**2) - (8*y**2 + 2*z**2)*(41*y**2 + z**2)) + 2*alpha*(-R + sqrt(x**2 + y**2))*(x**2 - 2*y**2)*(x**2 + y**2)*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)**7 + 2*(x**2 + y**2)**(3/2)*(x**2 + y**2 + z**2)**6*(4*x**2 - 11*y**2 - z**2) + (2*x**2 + 2*y**2)*(R**2*y*sqrt(x**2 + y**2) + R*(3*x**2*z + 2*y*z**2 - 2*y*(x**2 + y**2)) + sqrt(x**2 + y**2)*(x**2*(y - 3*z) + y**3 - 2*y*z**2))*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)**(13/2))/(2*(x**2 + y**2)**(3/2)*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)**(15/2)),
        "g": 0,
        "conv1": x*(30*R**10*y*z*(-x**4 + x**2*y**2 + 2*y**4) - 3*R**9*y*sqrt(x**2 + y**2)*(-x**4*(y + 100*z) + x**2*(2*y**3 + 100*y**2*z + 25*z**3) + 10*y**2*z*(20*y**2 + z**2)) + R**8*(-27*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2) + x**2*z**2*(2*x**4 + 13*x**2*y**2 + 2*y**4) + 30*y*z**3*(x**2 + y**2)*(19*x**2 + 16*y**2) + 1350*y*z*(-x**6 + 3*x**2*y**4 + 2*y**6) - z**6*(225*x**2 + 225*y**2)) + 2*R**7*sqrt(x**2 + y**2)*(54*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2) - 2*x**2*z**2*(4*x**4 + 23*x**2*y**2 + 10*y**4) - 15*y*z**5*(7*x**2 + 4*y**2) - 30*y*z**3*(x**2 + y**2)*(31*x**2 + 46*y**2) + 1800*y*z*(x**6 - 3*x**2*y**4 - 2*y**6) + z**6*(900*x**2 + 900*y**2)) + R**6*(x**2*z**4*(8*x**4 + 43*x**2*y**2 + 8*y**4) + 56*x**2*z**2*(x**2 + y**2)**2*(x**2 + 4*y**2) - 252*y**2*(x**2 - 2*y**2)*(x**3 + x*y**2)**2 + 270*y*z**5*(x**2 + y**2)*(5*x**2 + 4*y**2) + 1680*y*z**3*(x**2 + y**2)**2*(2*x**2 + 5*y**2) - 6300*y*z*(x**2 - 2*y**2)*(x**2 + y**2)**3 - z**8*(675*x**2 + 675*y**2) - 6300*z**6*(x**2 + y**2)**2) + 2*R**5*sqrt(x**2 + y**2)*(189*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2)**2 - 6*x**2*z**4*(4*x**4 + 20*x**2*y**2 + 7*y**4) - 14*x**2*z**2*(x**2 + y**2)*(4*x**4 + 17*x**2*y**2 + 22*y**4) - 90*y*z**7*(x**2 + y**2) - 45*y*z**5*(x**2 + y**2)*(41*x**2 + 44*y**2) - 105*y*z**3*(x**2 + y**2)**2*(17*x**2 + 74*y**2) + 3780*y*z*(x**2 - 2*y**2)*(x**2 + y**2)**3 + z**8*(2025*x**2 + 2025*y**2) + 6300*z**6*(x**2 + y**2)**2) + R**4*(-378*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2)**3 + 15*x**2*z**4*(x**2 + y**2)*(x**2 + 4*y**2)*(8*x**2 + 5*y**2) + 70*x**2*z**2*(x**2 + y**2)**2*(2*x**4 + 7*x**2*y**2 + 14*y**4) + 30*y*z**7*(x**2 + y**2)*(29*x**2 + 32*y**2) + 150*y*z**5*(x**2 + y**2)**2*(37*x**2 + 52*y**2) + 420*y*z**3*(x**2 + y**2)**3*(5*x**2 + 44*y**2) - 6300*y*z*(x**2 - 2*y**2)*(x**2 + y**2)**4 - z**10*(675*x**2 + 675*y**2) - 10125*z**8*(x**2 + y**2)**2 - z**6*(15738*x**6 + 47199*x**4*y**2 + 47238*x**2*y**4 + 15750*y**6)) + 2*R**3*sqrt(x**2 + y**2)*(126*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2)**3 - 20*x**2*z**4*(x**2 + y**2)**2*(4*x**2 + 13*y**2) - 14*x**2*z**2*(x**2 + y**2)**2*(4*x**4 + 11*x**2*y**2 + 34*y**4) - 15*y*z**9*(x**2 + 4*y**2) - 60*y*z**7*(x**2 + y**2)*(14*x**2 + 17*y**2) - 225*y*z**5*(x**2 + y**2)**2*(11*x**2 + 20*y**2) - 210*y*z**3*(x**2 + y**2)**3*(x**2 + 34*y**2) + 1800*y*z*(x**2 - 2*y**2)*(x**2 + y**2)**4 + z**10*(1350*x**2 + 1350*y**2) + 6750*z**8*(x**2 + y**2)**2 + z**6*(6276*x**6 + 18804*x**4*y**2 + 18864*x**2*y**4 + 6300*y**6)) + R**2*(-108*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2)**4 + 15*x**2*z**4*(x**2 + y**2)**2*(8*x**4 + 31*x**2*y**2 + 32*y**4) + 56*x**2*z**2*(x**2 + y**2)**3*(x**4 + 2*x**2*y**2 + 10*y**4) + 60*y*z**9*(x**2 + y**2)*(2*x**2 + 5*y**2) + 540*y*z**7*(x**2 + y**2)**2*(3*x**2 + 4*y**2) + 90*y*z**5*(x**2 + y**2)**3*(29*x**2 + 68*y**2) - 240*y*z**3*(x**2 - 29*y**2)*(x**2 + y**2)**4 - 1350*y*z*(x**2 - 2*y**2)*(x**2 + y**2)**5 - z**12*(225*x**2 + 225*y**2) - 4050*z**10*(x**2 + y**2)**2 - z**8*(10117*x**6 + 30350*x**4*y**2 + 30367*x**2*y**4 + 10125*y**6) - z**6*(18*x**2 + 18*y**2)*(346*x**6 + 1035*x**4*y**2 + 1042*x**2*y**4 + 350*y**6)) + R*sqrt(x**2 + y**2)*(x**2 + y**2 + z**2)**2*(27*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2)**2 - x**2*z**4*(16*x**4 + 47*x**2*y**2 + 22*y**4) - 2*x**2*z**2*(x**2 + y**2)*(8*x**4 + 37*x**2*y**2 + 38*y**4) + 15*y*z**7*(x**2 - 2*y**2) - 180*y*z**5*(x**2 + y**2)**2 - 15*y*z**3*(x**2 + y**2)**2*(29*x**2 + 50*y**2) + 300*y*z*(x**2 - 2*y**2)*(x**2 + y**2)**3 + z**8*(450*x**2 + 450*y**2) + 1800*z**6*(x**2 + y**2)**2) - (x**2 + y**2)**2*(x**2 + y**2 + z**2)**3*(x**4*(3*y**2 + 30*y*z - 2*z**2) - 2*x**2*(3*y**4 + 15*y**3*z + 4*y**2*z**2 + 30*y*z**3 + z**4) + 15*z*(-4*y**5 - 4*y**3*z**2 + 15*z**5)))/((x**2 + y**2)**2*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)**5),
        "conv2": (30*R**10*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2) - 3*R**9*sqrt(x**2 + y**2)*(x**4*y*(x**2 - 2*y**2) + 100*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2) + z**3*(10*x**4 + 15*x**2*y**2 - 10*y**4)) + R**8*(27*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2) + x**2*y*z**2*(2*x**4 + 13*x**2*y**2 + 2*y**4) + 1350*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**2 - 225*y*z**6*(x**2 + y**2) + z**3*(15*x**2 + 15*y**2)*(25*x**4 + 13*x**2*y**2 - 18*y**4)) - 2*R**7*sqrt(x**2 + y**2)*(54*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2) + 2*x**2*y*z**2*(7*x**4 + 20*x**2*y**2 + 4*y**4) + 1800*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**2 - 900*y*z**6*(x**2 + y**2) + z**5*(60*x**4 + 45*x**2*y**2 - 60*y**4) + z**3*(30*x**2 + 30*y**2)*(32*x**4 - x**2*y**2 - 18*y**4)) + R**6*(252*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2)**2 + x**2*y*z**4*(8*x**4 + 43*x**2*y**2 + 8*y**4) + 28*x**2*y*z**2*(x**2 + y**2)**2*(5*x**2 + 2*y**2) + 6300*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**3 - 675*y*z**8*(x**2 + y**2) - 6300*y*z**6*(x**2 + y**2)**2 + z**5*(30*x**2 + 30*y**2)*(32*x**4 + 13*x**2*y**2 - 28*y**4) + 420*z**3*(x**2 + y**2)**2*(13*x**4 - 5*x**2*y**2 - 6*y**4)) - 2*R**5*sqrt(x**2 + y**2)*(189*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2)**2 + 3*x**2*y*z**4*(11*x**4 + 37*x**2*y**2 + 8*y**4) + 14*x**2*y*z**2*(x**2 + y**2)*(13*x**4 + 8*x**2*y**2 + 4*y**4) + 3780*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**3 - 2025*y*z**8*(x**2 + y**2) - 6300*y*z**6*(x**2 + y**2)**2 + z**7*(90*x**4 - 90*y**4) + z**5*(45*x**2 + 45*y**2)*(36*x**4 + 5*x**2*y**2 - 28*y**4) + 105*z**3*(x**2 + y**2)**2*(46*x**4 - 29*x**2*y**2 - 18*y**4)) + R**4*(378*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2)**3 + 15*x**2*y*z**4*(x**2 + y**2)*(14*x**4 + 31*x**2*y**2 + 8*y**4) + 70*x**2*y*z**2*(x**2 + y**2)**2*(8*x**4 + x**2*y**2 + 2*y**4) + 6300*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**4 - 675*y*z**10*(x**2 + y**2) - 10125*y*z**8*(x**2 + y**2)**2 - 3*y*z**6*(5246*x**6 + 15733*x**4*y**2 + 15746*x**2*y**4 + 5250*y**6) + z**7*(30*x**2 + 30*y**2)*(31*x**4 - 2*x**2*y**2 - 30*y**4) + z**5*(x**2 + y**2)**2*(5*x**2 + 4*y**2)*(1200*x**2 - 1050*y**2) + 210*z**3*(x**2 + y**2)**3*(53*x**4 - 43*x**2*y**2 - 18*y**4)) - 2*R**3*sqrt(x**2 + y**2)*(126*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2)**3 + 10*x**2*y*z**4*(x**2 + y**2)**2*(17*x**2 + 8*y**2) + 14*x**2*y*z**2*(x**2 + y**2)**2*(19*x**4 - 4*x**2*y**2 + 4*y**4) + 1800*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**4 - 1350*y*z**10*(x**2 + y**2) - 6750*y*z**8*(x**2 + y**2)**2 - 6*y*z**6*(1045*x**6 + 3135*x**4*y**2 + 3146*x**2*y**4 + 1050*y**6) + z**9*(60*x**4 - 45*x**2*y**2 - 60*y**4) + z**7*(60*x**2 + 60*y**2)*(16*x**4 - 2*x**2*y**2 - 15*y**4) + 75*z**5*(x**2 + y**2)**2*(44*x**4 - 11*x**2*y**2 - 28*y**4) + z**3*(x**2 + y**2)**3*(4*x**2 + y**2)*(1050*x**2 - 1260*y**2)) + R**2*(108*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2)**4 + 15*x**2*y*z**4*(x**2 + y**2)**2*(20*x**4 + 19*x**2*y**2 + 8*y**4) + 28*x**2*y*z**2*(x**2 + y**2)**3*(11*x**4 - 5*x**2*y**2 + 2*y**4) + 1350*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**5 - 225*y*z**12*(x**2 + y**2) - 4050*y*z**10*(x**2 + y**2)**2 - y*z**8*(10117*x**6 + 30350*x**4*y**2 + 30367*x**2*y**4 + 10125*y**6) - 18*y*z**6*(x**2 + y**2)*(344*x**6 + 1037*x**4*y**2 + 1046*x**2*y**4 + 350*y**6) + z**9*(30*x**2 + 30*y**2)*(11*x**4 - 7*x**2*y**2 - 12*y**4) + 180*z**7*(x**2 + y**2)**2*(11*x**4 - 2*x**2*y**2 - 10*y**4) + 90*z**5*(x**2 + y**2)**3*(48*x**4 - 19*x**2*y**2 - 28*y**4) + 60*z**3*(x**2 + y**2)**4*(67*x**4 - 71*x**2*y**2 - 18*y**4)) - R*sqrt(x**2 + y**2)*(x**2 + y**2 + z**2)**2*(27*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2)**2 + x**2*y*z**4*(19*x**4 + 44*x**2*y**2 + 16*y**4) + 2*x**2*y*z**2*(x**2 + y**2)*(23*x**4 + 22*x**2*y**2 + 8*y**4) + 300*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**3 - 450*y*z**8*(x**2 + y**2) - 1800*y*z**6*(x**2 + y**2)**2 + z**7*(2*x**2 + y**2)*(15*x**2 - 30*y**2) + z**5*(x**2 + y**2)**2*(240*x**2 - 300*y**2) + 15*z**3*(x**2 + y**2)**2*(34*x**4 - 5*x**2*y**2 - 18*y**4)) + (x**2 + y**2)**2*(x**2 + y**2 + z**2)**3*(3*x**6*(y + 10*z) + x**4*(-6*y**3 - 30*y**2*z + 5*y*z**2 + 45*z**3) + x**2*z*(-60*y**4 + 2*y**3*z + 15*y**2*z**2 + 2*y*z**3 + 15*z**4) - 15*y*z**3*(2*y**3 + 2*y*z**2 + 15*z**3)))/((x**2 + y**2)**2*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)**5),
        "conv3": -z*(15*R**6*y*z*sqrt(x**2 + y**2)*(7*x**2 - 2*y**2) + R**5*(-x**2*(2*x**4 + 13*x**2*y**2 + 2*y**4) + 90*y*z*(-7*x**2 + 2*y**2)*(x**2 + y**2) + z**4*(225*x**2 + 225*y**2)) + 5*R**4*sqrt(x**2 + y**2)*(2*x**6 + x**4*y*(13*y + 315*z) + x**2*(2*y**4 + 225*y**3*z + 24*y*z**3 - 225*z**4) - 3*y**2*z*(30*y**3 + 4*y*z**2 + 75*z**3)) + R**3*(-x**2*z**2*(x**2 + 4*y**2)*(4*x**2 + y**2) - 10*x**2*(x**2 + y**2)*(2*x**4 + 13*x**2*y**2 + 2*y**4) + 240*y*z**3*(-2*x**2 + y**2)*(x**2 + y**2) + 300*y*z*(-7*x**2 + 2*y**2)*(x**2 + y**2)**2 + z**6*(225*x**2 + 225*y**2) + 2250*z**4*(x**2 + y**2)**2) + R**2*sqrt(x**2 + y**2)*(3*x**2*z**2*(x**2 + 4*y**2)*(4*x**2 + y**2) + 10*x**2*(x**2 + y**2)*(2*x**4 + 13*x**2*y**2 + 2*y**4) + 15*y*z**5*(x**2 - 2*y**2) - 360*y*z**3*(-2*x**2 + y**2)*(x**2 + y**2) + 225*y*z*(x**2 + y**2)**2*(7*x**2 - 2*y**2) - z**6*(675*x**2 + 675*y**2) - 2250*z**4*(x**2 + y**2)**2) + R*(x**2 + y**2)*(-3*x**2*z**2*(x**2 + 4*y**2)*(4*x**2 + y**2) - 5*x**2*(x**2 + y**2)*(2*x**4 + 13*x**2*y**2 + 2*y**4) + 30*y*z**5*(-x**2 + 2*y**2) + 240*y*z**3*(-2*x**2 + y**2)*(x**2 + y**2) + 90*y*z*(-7*x**2 + 2*y**2)*(x**2 + y**2)**2 + z**6*(675*x**2 + 675*y**2) + z**4*(x**2 + y**2)*(1123*x**2 + 1125*y**2)) + (x**2 + y**2)**(3/2)*(x**2 + y**2 + z**2)*(2*x**6 + x**4*(13*y**2 + 105*y*z + 2*z**2) + x**2*(2*y**4 + 75*y**3*z + 2*y**2*z**2 + 15*y*z**3 - 225*z**4) - 15*y**2*z*(2*y**3 + 2*y*z**2 + 15*z**3)))/((x**2 + y**2)**(3/2)*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)**3)
    }
elif mode == 'ols':
    exact = {
        "name": mode,
        "nu": nu,
        "phi": sqrt(x * x + y * y + z * z) - 1,
        "u1": -(x ** 2 * z + x * y ** 2 + y ** 2 * z ** 2 + z ** 4) / (x ** 2 + y ** 2 + z ** 2),
        "u2": y * (x ** 2 + x * z * (z - 1) + z ** 2) / (x ** 2 + y ** 2 + z ** 2),
        "u3": (x ** 3 + x * (y ** 2 + z ** 3) - y ** 2 * z) / (x ** 2 + y ** 2 + z ** 2),
        "p": x * y * y * y + z,
        "f1": alpha * x ** 2 - alpha * z ** 2 - x * (5 * x * z + 11 * x * (x ** 2 + y ** 2) + 5 * y ** 2) / (
                    x ** 2 + y ** 2 + z ** 2) ** 2 + y ** 3 - 4 + (-2 * x * (alpha * x ** 3 + alpha * y ** 2 + x * (
                    alpha * (y ** 2 + z) + 4 * y ** 3 - 15) + z) + 10 * y ** 2 + 5 * z) / (
                          2 * x ** 2 + 2 * y ** 2 + 2 * z ** 2),
        "f2": y * (alpha * x + alpha + 3 * x * y - (
                    alpha * x ** 3 + alpha * y ** 2 + x * (alpha * (y ** 2 + z) + 4 * y ** 3 - 10) + z - 5) / (
                               x ** 2 + y ** 2 + z ** 2) - (5 * x * z + 11 * x * (x ** 2 + y ** 2) + 5 * y ** 2) / (
                               x ** 2 + y ** 2 + z ** 2) ** 2),
        "f3": alpha * x * z + (-2 * alpha * x ** 3 * (z - 1) + 2 * x ** 2 + x * (
                    2 * y ** 2 * (alpha - z * (alpha + 4 * y)) + 8 * z - 5) - 2 * y ** 2 * (alpha * z - 1)) / (
                          2 * x ** 2 + 2 * y ** 2 + 2 * z ** 2) + (
                          x ** 3 * (5 - 11 * z) + x * y ** 2 * (5 - 11 * z) - 5 * y ** 2 * z) / (
                          x ** 2 + y ** 2 + z ** 2) ** 2,
        "g": (x ** 2 + x * z * (4 * z - 3) - 2 * y ** 2 + z ** 2) / (x ** 2 + y ** 2 + z ** 2),
        "conv1": (-x**3*(y**2*(2*z + 1) + z**2*(3*z - 2)) - 2*x**2*y**2*z*(z - 2) + x*(y**4*(1 - 2*z) - y**2*(3*z**4 + z**2) + z**5*(2 - 3*z)) + 3*y**2*z**2*(y**2 + z**2))/(x**2 + y**2 + z**2)**2,
        "conv2": y*(x**2*(x - y)*(x + y) + 2*x*z*(x**2*(x - 1) + y**2*(x + 1)) + z**5 + z**4*(x*(3*x + 2) + 1) + z**3*(-2*x*(x + 1) + y**2) + z**2*(2*x**2*(x + 2) - y**2*(3*x + 1)))/(x**2 + y**2 + z**2)**2,
        "conv3": (x**4*z*(3*z - 2) - 2*x**3*y**2 + x**2*z*(y**2*(2*z - 3) + z**3*(3*z - 2)) + x*y**2*(-2*y**2 + z**2*(2 - 5*z)) - y**2*z*(y**2*(z - 1) + z**2*(z + 1)))/(x**2 + y**2 + z**2)**2
    }
else:
    r = 1. / 3
    R = 2. / 3
    exact = {
        "name": mode,
        "nu": nu,
        "phi": (sqrt(x * x + y * y) - R) ** 2 + z * z - r * r,
        "u1": -z * (-15 * R * y * z + sqrt(x ** 2 + y ** 2) * (x ** 2 + 15 * y * z)) / (
                    sqrt(x ** 2 + y ** 2) * sqrt(R ** 2 - 2 * R * sqrt(x ** 2 + y ** 2) + x ** 2 + y ** 2 + z ** 2)),
        "u2": x * z * (-15 * R * z + sqrt(x ** 2 + y ** 2) * (2 * y + 15 * z)) / (
                    sqrt(x ** 2 + y ** 2) * sqrt(R ** 2 - 2 * R * sqrt(x ** 2 + y ** 2) + x ** 2 + y ** 2 + z ** 2)),
        "u3": x * (-R + sqrt(x ** 2 + y ** 2)) * (x ** 2 - 2 * y ** 2) / (
                    sqrt(x ** 2 + y ** 2) * sqrt(R ** 2 - 2 * R * sqrt(x ** 2 + y ** 2) + x ** 2 + y ** 2 + z ** 2)),
        "p": x * x * x + x * y * z,
        "f1": -alpha * z * (-15 * R * y * z + sqrt(x ** 2 + y ** 2) * (x ** 2 + 15 * y * z)) / (
                    sqrt(x ** 2 + y ** 2) * sqrt(R ** 2 - 2 * R * sqrt(x ** 2 + y ** 2) + x ** 2 + y ** 2 + z ** 2)) - (
                          30 * R ** 13 * y * (x ** 2 + y ** 2) ** (5 / 2) + R ** 12 * (x ** 2 + y ** 2) * (
                              15 * y * z ** 2 * (x ** 2 + y ** 2) - 390 * y * (x ** 2 + y ** 2) ** 2 + z * (
                                  x ** 2 - 2 * y ** 2) * (7 * x ** 2 + y ** 2)) + R ** 11 * (x ** 2 + y ** 2) ** (
                                      3 / 2) * (-15 * y * z ** 4 - 135 * y * z ** 2 * (x ** 2 + y ** 2) + 2340 * y * (
                              x ** 2 + y ** 2) ** 2 + z * (
                                                            -85 * x ** 4 + 140 * x ** 2 * y ** 2 + 24 * y ** 4)) + R ** 10 * (
                                      x ** 2 + y ** 2) * (225 * y * z ** 4 * (x ** 2 + y ** 2) + 495 * y * z ** 2 * (
                              x ** 2 + y ** 2) ** 2 - 8580 * y * (x ** 2 + y ** 2) ** 3 + z ** 3 * (
                                                                      33 * x ** 4 - 69 * x ** 2 * y ** 2 - 12 * y ** 4) + z * (
                                                                      x ** 2 + y ** 2) * (
                                                                      473 * x ** 4 - 679 * x ** 2 * y ** 2 - 132 * y ** 4)) + 5 * R ** 9 * (
                                      x ** 2 + y ** 2) ** (3 / 2) * (
                                      -15 * y * z ** 6 - 330 * y * z ** 4 * (x ** 2 + y ** 2) - 165 * y * z ** 2 * (
                                          x ** 2 + y ** 2) ** 2 + 4290 * y * (x ** 2 + y ** 2) ** 3 + z ** 3 * (
                                                  -67 * x ** 4 + 122 * x ** 2 * y ** 2 + 24 * y ** 4) + z * (
                                                  x ** 2 + y ** 2) * (
                                                  -319 * x ** 4 + 390 * x ** 2 * y ** 2 + 88 * y ** 4)) + 30 * R ** 8 * (
                                      x ** 2 + y ** 2) * (25 * y * z ** 6 * (x ** 2 + y ** 2) + 240 * y * z ** 4 * (
                              x ** 2 + y ** 2) ** 2 - 1287 * y * (x ** 2 + y ** 2) ** 4 - z ** 5 * (
                                                                      -2 * x ** 4 + 5 * x ** 2 * y ** 2 + y ** 4) + z ** 3 * (
                                                                      x ** 2 + y ** 2) * (
                                                                      51 * x ** 4 - 79 * x ** 2 * y ** 2 - 18 * y ** 4) + z * (
                                                                      x ** 2 + y ** 2) ** 2 * (
                                                                      121 * x ** 4 - 122 * x ** 2 * y ** 2 - 33 * y ** 4)) + 2 * R ** 7 * (
                                      x ** 2 + y ** 2) ** (3 / 2) * (
                                      -75 * y * z ** 8 - 2025 * y * z ** 6 * (x ** 2 + y ** 2) - 10125 * y * z ** 4 * (
                                          x ** 2 + y ** 2) ** 2 + 1485 * y * z ** 2 * (
                                                  x ** 2 + y ** 2) ** 3 + 25740 * y * (
                                                  x ** 2 + y ** 2) ** 4 + z ** 5 * (
                                                  -245 * x ** 4 + 520 * x ** 2 * y ** 2 + 120 * y ** 4) + z ** 3 * (
                                                  30 * x ** 2 + 30 * y ** 2) * (
                                                  -69 * x ** 4 + 88 * x ** 2 * y ** 2 + 24 * y ** 4) + 3 * z * (
                                                  x ** 2 + y ** 2) ** 2 * (
                                                  -979 * x ** 4 + 776 * x ** 2 * y ** 2 + 264 * y ** 4)) + 2 * R ** 6 * (
                                      x ** 2 + y ** 2) * (525 * y * z ** 8 * (x ** 2 + y ** 2) + 6825 * y * z ** 6 * (
                              x ** 2 + y ** 2) ** 2 + 19215 * y * z ** 4 * (
                                                                      x ** 2 + y ** 2) ** 3 - 3465 * y * z ** 2 * (
                                                                      x ** 2 + y ** 2) ** 4 - 25740 * y * (
                                                                      x ** 2 + y ** 2) ** 5 + z ** 7 * (
                                                                      25 * x ** 4 - 85 * x ** 2 * y ** 2 - 20 * y ** 4) + z ** 5 * (
                                                                      5 * x ** 2 + 5 * y ** 2) * (
                                                                      175 * x ** 4 - 305 * x ** 2 * y ** 2 - 84 * y ** 4) + 105 * z ** 3 * (
                                                                      x ** 2 + y ** 2) ** 2 * (
                                                                      35 * x ** 4 - 35 * x ** 2 * y ** 2 - 12 * y ** 4) + 21 * z * (
                                                                      x ** 2 + y ** 2) ** 3 * (
                                                                      165 * x ** 4 - 95 * x ** 2 * y ** 2 - 44 * y ** 4)) + 2 * R ** 5 * (
                                      x ** 2 + y ** 2) ** (3 / 2) * (
                                      -75 * y * z ** 10 - 2025 * y * z ** 8 * (x ** 2 + y ** 2) - 14700 * y * z ** 6 * (
                                          x ** 2 + y ** 2) ** 2 - 25200 * y * z ** 4 * (
                                                  x ** 2 + y ** 2) ** 3 + 4455 * y * z ** 2 * (
                                                  x ** 2 + y ** 2) ** 4 + 19305 * y * (
                                                  x ** 2 + y ** 2) ** 5 + z ** 7 * (
                                                  -155 * x ** 4 + 430 * x ** 2 * y ** 2 + 120 * y ** 4) + z ** 5 * (
                                                  -17 * x ** 2 + 28 * y ** 2) * (7 * x ** 2 + 2 * y ** 2) * (
                                                  15 * x ** 2 + 15 * y ** 2) + 21 * z ** 3 * (x ** 2 + y ** 2) ** 2 * (
                                                  -213 * x ** 4 + 154 * x ** 2 * y ** 2 + 72 * y ** 4) + 3 * z * (
                                                  x ** 2 + y ** 2) ** 3 * (
                                                  -1001 * x ** 4 + 358 * x ** 2 * y ** 2 + 264 * y ** 4)) + 5 * R ** 4 * (
                                      x ** 2 + y ** 2) * (135 * y * z ** 10 * (x ** 2 + y ** 2) + 1950 * y * z ** 8 * (
                              x ** 2 + y ** 2) ** 2 + 8190 * y * z ** 6 * (x ** 2 + y ** 2) ** 3 + 9180 * y * z ** 4 * (
                                                                      x ** 2 + y ** 2) ** 4 - 1485 * y * z ** 2 * (
                                                                      x ** 2 + y ** 2) ** 5 - 4290 * y * (
                                                                      x ** 2 + y ** 2) ** 6 + z ** 9 * (
                                                                      3 * x ** 4 - 21 * x ** 2 * y ** 2 - 6 * y ** 4) + z ** 7 * (
                                                                      8 * x ** 2 + 8 * y ** 2) * (
                                                                      20 * x ** 4 - 43 * x ** 2 * y ** 2 - 15 * y ** 4) + 10 * z ** 5 * (
                                                                      x ** 2 + y ** 2) ** 2 * (
                                                                      91 * x ** 4 - 89 * x ** 2 * y ** 2 - 42 * y ** 4) + 168 * z ** 3 * (
                                                                      x ** 2 + y ** 2) ** 3 * (
                                                                      9 * x ** 4 - 4 * x ** 2 * y ** 2 - 3 * y ** 4) + 3 * z * (
                                                                      x ** 2 + y ** 2) ** 4 * (
                                                                      253 * x ** 4 - 35 * x ** 2 * y ** 2 - 66 * y ** 4)) + 5 * R ** 3 * (
                                      x ** 2 + y ** 2) ** (3 / 2) * (x ** 2 + y ** 2 + z ** 2) ** 2 * (
                                      -15 * y * z ** 8 - 309 * y * z ** 6 * (x ** 2 + y ** 2) - 2217 * y * z ** 4 * (
                                          x ** 2 + y ** 2) ** 2 - 2607 * y * z ** 2 * (
                                                  x ** 2 + y ** 2) ** 3 + 1716 * y * (x ** 2 + y ** 2) ** 4 + z ** 5 * (
                                                  -13 * x ** 4 + 68 * x ** 2 * y ** 2 + 24 * y ** 4) + z ** 3 * (
                                                  2 * x ** 2 + 2 * y ** 2) * (
                                                  -97 * x ** 4 + 100 * x ** 2 * y ** 2 + 56 * y ** 4) + z * (
                                                  x ** 2 + y ** 2) ** 2 * (
                                                  -341 * x ** 4 - 28 * x ** 2 * y ** 2 + 88 * y ** 4)) - R ** 2 * (
                                      x ** 2 + y ** 2) * (x ** 2 + y ** 2 + z ** 2) ** 3 * (
                                      -165 * y * z ** 6 * (x ** 2 + y ** 2) - 2040 * y * z ** 4 * (
                                          x ** 2 + y ** 2) ** 2 - 5535 * y * z ** 2 * (
                                                  x ** 2 + y ** 2) ** 3 + 2340 * y * (x ** 2 + y ** 2) ** 4 + z ** 5 * (
                                                  3 * x ** 4 + 33 * x ** 2 * y ** 2 + 12 * y ** 4) + z ** 3 * (
                                                  6 * x ** 2 + 6 * y ** 2) * (
                                                  -19 * x ** 4 + 46 * x ** 2 * y ** 2 + 24 * y ** 4) + z * (
                                                  x ** 2 + y ** 2) ** 2 * (
                                                  -517 * x ** 4 - 157 * x ** 2 * y ** 2 + 132 * y ** 4)) + R * (
                                      x ** 2 + y ** 2) ** (3 / 2) * (x ** 2 + y ** 2 + z ** 2) ** 4 * (
                                      -15 * y * z ** 6 - 150 * y * z ** 4 * (x ** 2 + y ** 2) - 1245 * y * z ** 2 * (
                                          x ** 2 + y ** 2) ** 2 + 390 * y * (x ** 2 + y ** 2) ** 3 + z ** 3 * (
                                                  5 * x ** 4 + 50 * x ** 2 * y ** 2 + 24 * y ** 4) + z * (
                                                  x ** 2 + y ** 2) * (
                                                  -95 * x ** 4 - 50 * x ** 2 * y ** 2 + 24 * y ** 4)) - 2 * (
                                      x ** 2 + y ** 2) ** 3 * (x ** 2 + y ** 2 + z ** 2) ** 5 * (
                                      -60 * y * z ** 2 + 15 * y * (x ** 2 + y ** 2) + z ** 3 + z * (
                                          -4 * x ** 2 + y ** 2))) / (2 * (x ** 2 + y ** 2) ** 3 * (
                    R ** 2 - 2 * R * sqrt(x ** 2 + y ** 2) + x ** 2 + y ** 2 + z ** 2) ** (13 / 2)) - (
                          R ** 2 * y * sqrt(x ** 2 + y ** 2) * (x ** 2 * (-3 * y + z) - y ** 2 * z) + R * y * (
                              x ** 2 + y ** 2) * (x ** 2 * (6 * y - 3 * z) + 2 * y ** 2 * z) - (x ** 2 + y ** 2) ** (
                                      3 / 2) * (
                                      x ** 2 * (3 * y ** 2 - 2 * y * z + 3 * z ** 2) + y * z * (y ** 2 + z ** 2))) / (
                          (x ** 2 + y ** 2) ** (3 / 2) * (
                              R ** 2 - 2 * R * sqrt(x ** 2 + y ** 2) + x ** 2 + y ** 2 + z ** 2)),
        "f2": -x * (-30 * R ** 13 * (x ** 2 + y ** 2) ** (5 / 2) + 3 * R ** 12 * (x ** 2 + y ** 2) * (
                    -6 * y ** 3 * z - z ** 2 * (5 * x ** 2 + 5 * y ** 2) + 130 * (x ** 2 + y ** 2) ** 2) - R ** 11 * (
                                x ** 2 + y ** 2) ** (3 / 2) * (
                                -y * z * (17 * x ** 2 + 218 * y ** 2) - 15 * z ** 4 - z ** 2 * (
                                    135 * x ** 2 + 135 * y ** 2) + 2340 * (x ** 2 + y ** 2) ** 2) + 5 * R ** 10 * (
                                x ** 2 + y ** 2) * (-18 * y ** 3 * z ** 3 - 2 * y * z * (x ** 2 + y ** 2) * (
                    19 * x ** 2 + 121 * y ** 2) - z ** 4 * (45 * x ** 2 + 45 * y ** 2) - 99 * z ** 2 * (
                                                                x ** 2 + y ** 2) ** 2 + 1716 * (
                                                                x ** 2 + y ** 2) ** 3) - 5 * R ** 9 * (
                                x ** 2 + y ** 2) ** (3 / 2) * (
                                -y * z ** 3 * (17 * x ** 2 + 182 * y ** 2) - y * z * (x ** 2 + y ** 2) * (
                                    193 * x ** 2 + 814 * y ** 2) - 15 * z ** 6 - z ** 4 * (
                                            330 * x ** 2 + 330 * y ** 2) - 165 * z ** 2 * (
                                            x ** 2 + y ** 2) ** 2 + 4290 * (x ** 2 + y ** 2) ** 3) + 30 * R ** 8 * (
                                x ** 2 + y ** 2) * (-6 * y ** 3 * z ** 5 - 2 * y * z ** 3 * (x ** 2 + y ** 2) * (
                    13 * x ** 2 + 69 * y ** 2) - 14 * y * z * (x ** 2 + y ** 2) ** 2 * (
                                                                7 * x ** 2 + 22 * y ** 2) - z ** 6 * (
                                                                25 * x ** 2 + 25 * y ** 2) - 240 * z ** 4 * (
                                                                x ** 2 + y ** 2) ** 2 + 1287 * (
                                                                x ** 2 + y ** 2) ** 4) - 2 * R ** 7 * (
                                x ** 2 + y ** 2) ** (3 / 2) * (
                                -5 * y * z ** 5 * (17 * x ** 2 + 146 * y ** 2) - 30 * y * z ** 3 * (x ** 2 + y ** 2) * (
                                    53 * x ** 2 + 186 * y ** 2) - 3 * y * z * (x ** 2 + y ** 2) ** 2 * (
                                            995 * x ** 2 + 2486 * y ** 2) - 75 * z ** 8 - z ** 6 * (
                                            2025 * x ** 2 + 2025 * y ** 2) - 10125 * z ** 4 * (
                                            x ** 2 + y ** 2) ** 2 + 1485 * z ** 2 * (x ** 2 + y ** 2) ** 3 + 25740 * (
                                            x ** 2 + y ** 2) ** 4) + 2 * R ** 6 * (x ** 2 + y ** 2) * (
                                -90 * y ** 3 * z ** 7 - 10 * y * z ** 5 * (x ** 2 + y ** 2) * (
                                    61 * x ** 2 + 259 * y ** 2) - 210 * y * z ** 3 * (x ** 2 + y ** 2) ** 2 * (
                                            18 * x ** 2 + 47 * y ** 2) - 42 * y * z * (x ** 2 + y ** 2) ** 3 * (
                                            101 * x ** 2 + 209 * y ** 2) - z ** 8 * (
                                            525 * x ** 2 + 525 * y ** 2) - 6825 * z ** 6 * (
                                            x ** 2 + y ** 2) ** 2 - 19215 * z ** 4 * (
                                            x ** 2 + y ** 2) ** 3 + 3465 * z ** 2 * (x ** 2 + y ** 2) ** 4 + 25740 * (
                                            x ** 2 + y ** 2) ** 5) - 10 * R ** 5 * (x ** 2 + y ** 2) ** (3 / 2) * (
                                -y * z ** 7 * (17 * x ** 2 + 110 * y ** 2) - 75 * y * z ** 5 * (x ** 2 + y ** 2) * (
                                    5 * x ** 2 + 14 * y ** 2) - 21 * y * z ** 3 * (x ** 2 + y ** 2) ** 2 * (
                                            55 * x ** 2 + 114 * y ** 2) - 3 * y * z * (x ** 2 + y ** 2) ** 3 * (
                                            287 * x ** 2 + 506 * y ** 2) - 15 * z ** 10 - z ** 8 * (
                                            405 * x ** 2 + 405 * y ** 2) - 2940 * z ** 6 * (
                                            x ** 2 + y ** 2) ** 2 - 5040 * z ** 4 * (
                                            x ** 2 + y ** 2) ** 3 + 891 * z ** 2 * (x ** 2 + y ** 2) ** 4 + 3861 * (
                                            x ** 2 + y ** 2) ** 5) + 5 * R ** 4 * (x ** 2 + y ** 2) * (
                                -18 * y ** 3 * z ** 9 - 16 * y * z ** 7 * (x ** 2 + y ** 2) * (
                                    11 * x ** 2 + 35 * y ** 2) - 20 * y * z ** 5 * (x ** 2 + y ** 2) ** 2 * (
                                            64 * x ** 2 + 133 * y ** 2) - 336 * y * z ** 3 * (x ** 2 + y ** 2) ** 3 * (
                                            7 * x ** 2 + 12 * y ** 2) - 6 * y * z * (x ** 2 + y ** 2) ** 4 * (
                                            208 * x ** 2 + 319 * y ** 2) - z ** 10 * (
                                            135 * x ** 2 + 135 * y ** 2) - 1950 * z ** 8 * (
                                            x ** 2 + y ** 2) ** 2 - 8190 * z ** 6 * (
                                            x ** 2 + y ** 2) ** 3 - 9180 * z ** 4 * (
                                            x ** 2 + y ** 2) ** 4 + 1485 * z ** 2 * (x ** 2 + y ** 2) ** 5 + 4290 * (
                                            x ** 2 + y ** 2) ** 6) - 5 * R ** 3 * (x ** 2 + y ** 2) ** (3 / 2) * (
                                x ** 2 + y ** 2 + z ** 2) ** 2 * (
                                -y * z ** 5 * (17 * x ** 2 + 74 * y ** 2) - 6 * y * z ** 3 * (x ** 2 + y ** 2) * (
                                    55 * x ** 2 + 102 * y ** 2) - 3 * y * z * (x ** 2 + y ** 2) ** 2 * (
                                            211 * x ** 2 + 286 * y ** 2) - 15 * z ** 8 - z ** 6 * (
                                            309 * x ** 2 + 309 * y ** 2) - 2217 * z ** 4 * (
                                            x ** 2 + y ** 2) ** 2 - 2607 * z ** 2 * (x ** 2 + y ** 2) ** 3 + 1716 * (
                                            x ** 2 + y ** 2) ** 4) + R ** 2 * (x ** 2 + y ** 2) * (
                                x ** 2 + y ** 2 + z ** 2) ** 3 * (
                                -18 * y ** 3 * z ** 5 - 6 * y * z ** 3 * (x ** 2 + y ** 2) * (
                                    45 * x ** 2 + 86 * y ** 2) - 2 * y * z * (x ** 2 + y ** 2) ** 2 * (
                                            535 * x ** 2 + 649 * y ** 2) - z ** 6 * (
                                            165 * x ** 2 + 165 * y ** 2) - 2040 * z ** 4 * (
                                            x ** 2 + y ** 2) ** 2 - 5535 * z ** 2 * (x ** 2 + y ** 2) ** 3 + 2340 * (
                                            x ** 2 + y ** 2) ** 4) - R * (x ** 2 + y ** 2) ** (3 / 2) * (
                                x ** 2 + y ** 2 + z ** 2) ** 4 * (
                                -y * z ** 3 * (17 * x ** 2 + 38 * y ** 2) - 7 * y * z * (x ** 2 + y ** 2) * (
                                    31 * x ** 2 + 34 * y ** 2) - 15 * z ** 6 - z ** 4 * (
                                            150 * x ** 2 + 150 * y ** 2) - 1245 * z ** 2 * (
                                            x ** 2 + y ** 2) ** 2 + 390 * (x ** 2 + y ** 2) ** 3) + 2 * alpha * z * (
                                x ** 2 + y ** 2) ** (5 / 2) * (
                                15 * R * z - sqrt(x ** 2 + y ** 2) * (2 * y + 15 * z)) * (
                                R ** 2 - 2 * R * sqrt(x ** 2 + y ** 2) + x ** 2 + y ** 2 + z ** 2) ** 6 + 2 * (
                                x ** 2 + y ** 2) ** (3 / 2) * (
                                R ** 2 * sqrt(x ** 2 + y ** 2) * (x ** 2 * (3 * y - z) + y ** 2 * z) - R * (
                                    x ** 2 + y ** 2) * (x ** 2 * (6 * y - 2 * z) + 3 * y ** 2 * z) + (
                                            x ** 2 + y ** 2) ** (3 / 2) * (
                                            x ** 2 * (3 * y - z) + 2 * y ** 2 * z - z ** 3)) * (
                                R ** 2 - 2 * R * sqrt(x ** 2 + y ** 2) + x ** 2 + y ** 2 + z ** 2) ** (11 / 2) + 10 * (
                                x ** 2 + y ** 2) ** 3 * (x ** 2 + y ** 2 + z ** 2) ** 5 * (
                                3 * x ** 2 + 3 * y ** 2 - 2 * y * z - 12 * z ** 2)) / (2 * (x ** 2 + y ** 2) ** 3 * (
                    R ** 2 - 2 * R * sqrt(x ** 2 + y ** 2) + x ** 2 + y ** 2 + z ** 2) ** (13 / 2)),
        "f3": x * (R ** 15 * (-7 * x ** 2 + 20 * y ** 2) + 2 * R ** 14 * sqrt(x ** 2 + y ** 2) * (
                    53 * x ** 2 - 151 * y ** 2) + R ** 13 * (-749 * x ** 4 + x ** 2 * (
                    1379 * y ** 2 - 40 * z ** 2) + 2128 * y ** 4 + 122 * y ** 2 * z ** 2) + 2 * R ** 12 * sqrt(
            x ** 2 + y ** 2) * (z ** 2 * (263 * x ** 2 - 799 * y ** 2) + (x ** 2 + y ** 2) * (
                    1638 * x ** 2 - 4641 * y ** 2)) + R ** 11 * (
                               z ** 4 * (-93 * x ** 2 + 312 * y ** 2) - z ** 2 * (x ** 2 + y ** 2) * (
                                   3192 * x ** 2 - 9660 * y ** 2) + (-9919 * x ** 2 + 28028 * y ** 2) * (
                                           x ** 2 + y ** 2) ** 2) + 2 * R ** 10 * sqrt(x ** 2 + y ** 2) * (
                               z ** 4 * (519 * x ** 2 - 1731 * y ** 2) + z ** 2 * (x ** 2 + y ** 2) * (
                                   5918 * x ** 2 - 17842 * y ** 2) + (x ** 2 + y ** 2) ** 2 * (
                                           11011 * x ** 2 - 31031 * y ** 2)) + R ** 9 * (
                               z ** 6 * (-110 * x ** 2 + 430 * y ** 2) - z ** 4 * (x ** 2 + y ** 2) * (
                                   5265 * x ** 2 - 17460 * y ** 2) - z ** 2 * (x ** 2 + y ** 2) ** 2 * (
                                           29920 * x ** 2 - 89870 * y ** 2) + (-37037 * x ** 2 + 104104 * y ** 2) * (
                                           x ** 2 + y ** 2) ** 3) + 2 * R ** 8 * sqrt(x ** 2 + y ** 2) * (
                               z ** 6 * (505 * x ** 2 - 1955 * y ** 2) + z ** 4 * (x ** 2 + y ** 2) * (
                                   8010 * x ** 2 - 26415 * y ** 2) + z ** 2 * (x ** 2 + y ** 2) ** 2 * (
                                           27225 * x ** 2 - 81477 * y ** 2) + (x ** 2 + y ** 2) ** 3 * (
                                           24024 * x ** 2 - 67353 * y ** 2)) + R ** 7 * (
                               z ** 8 * (-65 * x ** 2 + 340 * y ** 2) - z ** 6 * (x ** 2 + y ** 2) * (
                                   4120 * x ** 2 - 15800 * y ** 2) - z ** 4 * (x ** 2 + y ** 2) ** 2 * (
                                           32490 * x ** 2 - 106560 * y ** 2) - z ** 2 * (x ** 2 + y ** 2) ** 3 * (
                                           73392 * x ** 2 - 218856 * y ** 2) + (-48477 * x ** 2 + 135564 * y ** 2) * (
                                           x ** 2 + y ** 2) ** 4) + 2 * R ** 6 * sqrt(x ** 2 + y ** 2) * (
                               z ** 8 * (235 * x ** 2 - 1205 * y ** 2) + z ** 6 * (x ** 2 + y ** 2) * (
                                   4900 * x ** 2 - 18620 * y ** 2) + z ** 4 * (x ** 2 + y ** 2) ** 2 * (
                                           23058 * x ** 2 - 75222 * y ** 2) + z ** 2 * (x ** 2 + y ** 2) ** 3 * (
                                           37092 * x ** 2 - 110220 * y ** 2) + (x ** 2 + y ** 2) ** 4 * (
                                           19019 * x ** 2 - 53053 * y ** 2)) + R ** 5 * (
                               z ** 10 * (-12 * x ** 2 + 150 * y ** 2) - z ** 8 * (x ** 2 + y ** 2) * (
                                   1455 * x ** 2 - 7320 * y ** 2) - z ** 6 * (x ** 2 + y ** 2) ** 2 * (
                                           14980 * x ** 2 - 56420 * y ** 2) - z ** 4 * (x ** 2 + y ** 2) ** 3 * (
                                           46746 * x ** 2 - 151704 * y ** 2) - z ** 2 * (x ** 2 + y ** 2) ** 4 * (
                                           56232 * x ** 2 - 166518 * y ** 2) + (-23023 * x ** 2 + 64064 * y ** 2) * (
                                           x ** 2 + y ** 2) ** 5) + 2 * R ** 4 * sqrt(x ** 2 + y ** 2) * (
                               x ** 2 + y ** 2 + z ** 2) ** 2 * (
                               z ** 6 * (33 * x ** 2 - 381 * y ** 2) + z ** 4 * (x ** 2 + y ** 2) * (
                                   1184 * x ** 2 - 5413 * y ** 2) + z ** 2 * (x ** 2 + y ** 2) ** 2 * (
                                           5229 * x ** 2 - 17283 * y ** 2) + (x ** 2 + y ** 2) ** 3 * (
                                           5278 * x ** 2 - 14651 * y ** 2)) - R ** 3 * (
                               x ** 2 + y ** 2 + z ** 2) ** 3 * (
                               -z ** 6 * (5 * x ** 2 + 32 * y ** 2) + z ** 4 * (x ** 2 + y ** 2) * (
                                   159 * x ** 2 - 1452 * y ** 2) + z ** 2 * (x ** 2 + y ** 2) ** 2 * (
                                           2113 * x ** 2 - 8048 * y ** 2) + (x ** 2 + y ** 2) ** 3 * (
                                           3549 * x ** 2 - 9828 * y ** 2)) + 2 * R ** 2 * sqrt(x ** 2 + y ** 2) * (
                               x ** 2 + y ** 2 + z ** 2) ** 4 * (
                               -z ** 4 * (7 * x ** 2 + 49 * y ** 2) + z ** 2 * (x ** 2 + y ** 2) * (
                                   106 * x ** 2 - 590 * y ** 2) + (x ** 2 + y ** 2) ** 2 * (
                                           413 * x ** 2 - 1141 * y ** 2)) - R * (x ** 2 + y ** 2) * (
                               x ** 2 + y ** 2 + z ** 2) ** 5 * (
                               119 * x ** 4 - x ** 2 * (209 * y ** 2 + 3 * z ** 2) - (8 * y ** 2 + 2 * z ** 2) * (
                                   41 * y ** 2 + z ** 2)) + 2 * alpha * (-R + sqrt(x ** 2 + y ** 2)) * (
                               x ** 2 - 2 * y ** 2) * (x ** 2 + y ** 2) * (
                               R ** 2 - 2 * R * sqrt(x ** 2 + y ** 2) + x ** 2 + y ** 2 + z ** 2) ** 7 + 2 * (
                               x ** 2 + y ** 2) ** (3 / 2) * (x ** 2 + y ** 2 + z ** 2) ** 6 * (
                               4 * x ** 2 - 11 * y ** 2 - z ** 2) + (2 * x ** 2 + 2 * y ** 2) * (
                               R ** 2 * y * sqrt(x ** 2 + y ** 2) + R * (
                                   3 * x ** 2 * z + 2 * y * z ** 2 - 2 * y * (x ** 2 + y ** 2)) + sqrt(
                           x ** 2 + y ** 2) * (x ** 2 * (y - 3 * z) + y ** 3 - 2 * y * z ** 2)) * (
                               R ** 2 - 2 * R * sqrt(x ** 2 + y ** 2) + x ** 2 + y ** 2 + z ** 2) ** (13 / 2)) / (
                          2 * (x ** 2 + y ** 2) ** (3 / 2) * (
                              R ** 2 - 2 * R * sqrt(x ** 2 + y ** 2) + x ** 2 + y ** 2 + z ** 2) ** (15 / 2)),
        "g": 0,
        "conv1": x*(30*R**10*y*z*(-x**4 + x**2*y**2 + 2*y**4) - 3*R**9*y*sqrt(x**2 + y**2)*(-x**4*(y + 100*z) + x**2*(2*y**3 + 100*y**2*z + 25*z**3) + 10*y**2*z*(20*y**2 + z**2)) + R**8*(-27*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2) + x**2*z**2*(2*x**4 + 13*x**2*y**2 + 2*y**4) + 30*y*z**3*(x**2 + y**2)*(19*x**2 + 16*y**2) + 1350*y*z*(-x**6 + 3*x**2*y**4 + 2*y**6) - z**6*(225*x**2 + 225*y**2)) + 2*R**7*sqrt(x**2 + y**2)*(54*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2) - 2*x**2*z**2*(4*x**4 + 23*x**2*y**2 + 10*y**4) - 15*y*z**5*(7*x**2 + 4*y**2) - 30*y*z**3*(x**2 + y**2)*(31*x**2 + 46*y**2) + 1800*y*z*(x**6 - 3*x**2*y**4 - 2*y**6) + z**6*(900*x**2 + 900*y**2)) + R**6*(x**2*z**4*(8*x**4 + 43*x**2*y**2 + 8*y**4) + 56*x**2*z**2*(x**2 + y**2)**2*(x**2 + 4*y**2) - 252*y**2*(x**2 - 2*y**2)*(x**3 + x*y**2)**2 + 270*y*z**5*(x**2 + y**2)*(5*x**2 + 4*y**2) + 1680*y*z**3*(x**2 + y**2)**2*(2*x**2 + 5*y**2) - 6300*y*z*(x**2 - 2*y**2)*(x**2 + y**2)**3 - z**8*(675*x**2 + 675*y**2) - 6300*z**6*(x**2 + y**2)**2) + 2*R**5*sqrt(x**2 + y**2)*(189*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2)**2 - 6*x**2*z**4*(4*x**4 + 20*x**2*y**2 + 7*y**4) - 14*x**2*z**2*(x**2 + y**2)*(4*x**4 + 17*x**2*y**2 + 22*y**4) - 90*y*z**7*(x**2 + y**2) - 45*y*z**5*(x**2 + y**2)*(41*x**2 + 44*y**2) - 105*y*z**3*(x**2 + y**2)**2*(17*x**2 + 74*y**2) + 3780*y*z*(x**2 - 2*y**2)*(x**2 + y**2)**3 + z**8*(2025*x**2 + 2025*y**2) + 6300*z**6*(x**2 + y**2)**2) + R**4*(-378*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2)**3 + 15*x**2*z**4*(x**2 + y**2)*(x**2 + 4*y**2)*(8*x**2 + 5*y**2) + 70*x**2*z**2*(x**2 + y**2)**2*(2*x**4 + 7*x**2*y**2 + 14*y**4) + 30*y*z**7*(x**2 + y**2)*(29*x**2 + 32*y**2) + 150*y*z**5*(x**2 + y**2)**2*(37*x**2 + 52*y**2) + 420*y*z**3*(x**2 + y**2)**3*(5*x**2 + 44*y**2) - 6300*y*z*(x**2 - 2*y**2)*(x**2 + y**2)**4 - z**10*(675*x**2 + 675*y**2) - 10125*z**8*(x**2 + y**2)**2 - z**6*(15738*x**6 + 47199*x**4*y**2 + 47238*x**2*y**4 + 15750*y**6)) + 2*R**3*sqrt(x**2 + y**2)*(126*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2)**3 - 20*x**2*z**4*(x**2 + y**2)**2*(4*x**2 + 13*y**2) - 14*x**2*z**2*(x**2 + y**2)**2*(4*x**4 + 11*x**2*y**2 + 34*y**4) - 15*y*z**9*(x**2 + 4*y**2) - 60*y*z**7*(x**2 + y**2)*(14*x**2 + 17*y**2) - 225*y*z**5*(x**2 + y**2)**2*(11*x**2 + 20*y**2) - 210*y*z**3*(x**2 + y**2)**3*(x**2 + 34*y**2) + 1800*y*z*(x**2 - 2*y**2)*(x**2 + y**2)**4 + z**10*(1350*x**2 + 1350*y**2) + 6750*z**8*(x**2 + y**2)**2 + z**6*(6276*x**6 + 18804*x**4*y**2 + 18864*x**2*y**4 + 6300*y**6)) + R**2*(-108*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2)**4 + 15*x**2*z**4*(x**2 + y**2)**2*(8*x**4 + 31*x**2*y**2 + 32*y**4) + 56*x**2*z**2*(x**2 + y**2)**3*(x**4 + 2*x**2*y**2 + 10*y**4) + 60*y*z**9*(x**2 + y**2)*(2*x**2 + 5*y**2) + 540*y*z**7*(x**2 + y**2)**2*(3*x**2 + 4*y**2) + 90*y*z**5*(x**2 + y**2)**3*(29*x**2 + 68*y**2) - 240*y*z**3*(x**2 - 29*y**2)*(x**2 + y**2)**4 - 1350*y*z*(x**2 - 2*y**2)*(x**2 + y**2)**5 - z**12*(225*x**2 + 225*y**2) - 4050*z**10*(x**2 + y**2)**2 - z**8*(10117*x**6 + 30350*x**4*y**2 + 30367*x**2*y**4 + 10125*y**6) - z**6*(18*x**2 + 18*y**2)*(346*x**6 + 1035*x**4*y**2 + 1042*x**2*y**4 + 350*y**6)) + R*sqrt(x**2 + y**2)*(x**2 + y**2 + z**2)**2*(27*x**2*y**2*(x**2 - 2*y**2)*(x**2 + y**2)**2 - x**2*z**4*(16*x**4 + 47*x**2*y**2 + 22*y**4) - 2*x**2*z**2*(x**2 + y**2)*(8*x**4 + 37*x**2*y**2 + 38*y**4) + 15*y*z**7*(x**2 - 2*y**2) - 180*y*z**5*(x**2 + y**2)**2 - 15*y*z**3*(x**2 + y**2)**2*(29*x**2 + 50*y**2) + 300*y*z*(x**2 - 2*y**2)*(x**2 + y**2)**3 + z**8*(450*x**2 + 450*y**2) + 1800*z**6*(x**2 + y**2)**2) - (x**2 + y**2)**2*(x**2 + y**2 + z**2)**3*(x**4*(3*y**2 + 30*y*z - 2*z**2) - 2*x**2*(3*y**4 + 15*y**3*z + 4*y**2*z**2 + 30*y*z**3 + z**4) + 15*z*(-4*y**5 - 4*y**3*z**2 + 15*z**5)))/((x**2 + y**2)**2*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)**5),
        "conv2": (30*R**10*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2) - 3*R**9*sqrt(x**2 + y**2)*(x**4*y*(x**2 - 2*y**2) + 100*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2) + z**3*(10*x**4 + 15*x**2*y**2 - 10*y**4)) + R**8*(27*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2) + x**2*y*z**2*(2*x**4 + 13*x**2*y**2 + 2*y**4) + 1350*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**2 - 225*y*z**6*(x**2 + y**2) + z**3*(15*x**2 + 15*y**2)*(25*x**4 + 13*x**2*y**2 - 18*y**4)) - 2*R**7*sqrt(x**2 + y**2)*(54*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2) + 2*x**2*y*z**2*(7*x**4 + 20*x**2*y**2 + 4*y**4) + 1800*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**2 - 900*y*z**6*(x**2 + y**2) + z**5*(60*x**4 + 45*x**2*y**2 - 60*y**4) + z**3*(30*x**2 + 30*y**2)*(32*x**4 - x**2*y**2 - 18*y**4)) + R**6*(252*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2)**2 + x**2*y*z**4*(8*x**4 + 43*x**2*y**2 + 8*y**4) + 28*x**2*y*z**2*(x**2 + y**2)**2*(5*x**2 + 2*y**2) + 6300*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**3 - 675*y*z**8*(x**2 + y**2) - 6300*y*z**6*(x**2 + y**2)**2 + z**5*(30*x**2 + 30*y**2)*(32*x**4 + 13*x**2*y**2 - 28*y**4) + 420*z**3*(x**2 + y**2)**2*(13*x**4 - 5*x**2*y**2 - 6*y**4)) - 2*R**5*sqrt(x**2 + y**2)*(189*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2)**2 + 3*x**2*y*z**4*(11*x**4 + 37*x**2*y**2 + 8*y**4) + 14*x**2*y*z**2*(x**2 + y**2)*(13*x**4 + 8*x**2*y**2 + 4*y**4) + 3780*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**3 - 2025*y*z**8*(x**2 + y**2) - 6300*y*z**6*(x**2 + y**2)**2 + z**7*(90*x**4 - 90*y**4) + z**5*(45*x**2 + 45*y**2)*(36*x**4 + 5*x**2*y**2 - 28*y**4) + 105*z**3*(x**2 + y**2)**2*(46*x**4 - 29*x**2*y**2 - 18*y**4)) + R**4*(378*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2)**3 + 15*x**2*y*z**4*(x**2 + y**2)*(14*x**4 + 31*x**2*y**2 + 8*y**4) + 70*x**2*y*z**2*(x**2 + y**2)**2*(8*x**4 + x**2*y**2 + 2*y**4) + 6300*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**4 - 675*y*z**10*(x**2 + y**2) - 10125*y*z**8*(x**2 + y**2)**2 - 3*y*z**6*(5246*x**6 + 15733*x**4*y**2 + 15746*x**2*y**4 + 5250*y**6) + z**7*(30*x**2 + 30*y**2)*(31*x**4 - 2*x**2*y**2 - 30*y**4) + z**5*(x**2 + y**2)**2*(5*x**2 + 4*y**2)*(1200*x**2 - 1050*y**2) + 210*z**3*(x**2 + y**2)**3*(53*x**4 - 43*x**2*y**2 - 18*y**4)) - 2*R**3*sqrt(x**2 + y**2)*(126*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2)**3 + 10*x**2*y*z**4*(x**2 + y**2)**2*(17*x**2 + 8*y**2) + 14*x**2*y*z**2*(x**2 + y**2)**2*(19*x**4 - 4*x**2*y**2 + 4*y**4) + 1800*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**4 - 1350*y*z**10*(x**2 + y**2) - 6750*y*z**8*(x**2 + y**2)**2 - 6*y*z**6*(1045*x**6 + 3135*x**4*y**2 + 3146*x**2*y**4 + 1050*y**6) + z**9*(60*x**4 - 45*x**2*y**2 - 60*y**4) + z**7*(60*x**2 + 60*y**2)*(16*x**4 - 2*x**2*y**2 - 15*y**4) + 75*z**5*(x**2 + y**2)**2*(44*x**4 - 11*x**2*y**2 - 28*y**4) + z**3*(x**2 + y**2)**3*(4*x**2 + y**2)*(1050*x**2 - 1260*y**2)) + R**2*(108*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2)**4 + 15*x**2*y*z**4*(x**2 + y**2)**2*(20*x**4 + 19*x**2*y**2 + 8*y**4) + 28*x**2*y*z**2*(x**2 + y**2)**3*(11*x**4 - 5*x**2*y**2 + 2*y**4) + 1350*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**5 - 225*y*z**12*(x**2 + y**2) - 4050*y*z**10*(x**2 + y**2)**2 - y*z**8*(10117*x**6 + 30350*x**4*y**2 + 30367*x**2*y**4 + 10125*y**6) - 18*y*z**6*(x**2 + y**2)*(344*x**6 + 1037*x**4*y**2 + 1046*x**2*y**4 + 350*y**6) + z**9*(30*x**2 + 30*y**2)*(11*x**4 - 7*x**2*y**2 - 12*y**4) + 180*z**7*(x**2 + y**2)**2*(11*x**4 - 2*x**2*y**2 - 10*y**4) + 90*z**5*(x**2 + y**2)**3*(48*x**4 - 19*x**2*y**2 - 28*y**4) + 60*z**3*(x**2 + y**2)**4*(67*x**4 - 71*x**2*y**2 - 18*y**4)) - R*sqrt(x**2 + y**2)*(x**2 + y**2 + z**2)**2*(27*x**4*y*(x**2 - 2*y**2)*(x**2 + y**2)**2 + x**2*y*z**4*(19*x**4 + 44*x**2*y**2 + 16*y**4) + 2*x**2*y*z**2*(x**2 + y**2)*(23*x**4 + 22*x**2*y**2 + 8*y**4) + 300*x**2*z*(x**2 - 2*y**2)*(x**2 + y**2)**3 - 450*y*z**8*(x**2 + y**2) - 1800*y*z**6*(x**2 + y**2)**2 + z**7*(2*x**2 + y**2)*(15*x**2 - 30*y**2) + z**5*(x**2 + y**2)**2*(240*x**2 - 300*y**2) + 15*z**3*(x**2 + y**2)**2*(34*x**4 - 5*x**2*y**2 - 18*y**4)) + (x**2 + y**2)**2*(x**2 + y**2 + z**2)**3*(3*x**6*(y + 10*z) + x**4*(-6*y**3 - 30*y**2*z + 5*y*z**2 + 45*z**3) + x**2*z*(-60*y**4 + 2*y**3*z + 15*y**2*z**2 + 2*y*z**3 + 15*z**4) - 15*y*z**3*(2*y**3 + 2*y*z**2 + 15*z**3)))/((x**2 + y**2)**2*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)**5),
        "conv3": -z*(15*R**6*y*z*sqrt(x**2 + y**2)*(7*x**2 - 2*y**2) + R**5*(-x**2*(2*x**4 + 13*x**2*y**2 + 2*y**4) + 90*y*z*(-7*x**2 + 2*y**2)*(x**2 + y**2) + z**4*(225*x**2 + 225*y**2)) + 5*R**4*sqrt(x**2 + y**2)*(2*x**6 + x**4*y*(13*y + 315*z) + x**2*(2*y**4 + 225*y**3*z + 24*y*z**3 - 225*z**4) - 3*y**2*z*(30*y**3 + 4*y*z**2 + 75*z**3)) + R**3*(-x**2*z**2*(x**2 + 4*y**2)*(4*x**2 + y**2) - 10*x**2*(x**2 + y**2)*(2*x**4 + 13*x**2*y**2 + 2*y**4) + 240*y*z**3*(-2*x**2 + y**2)*(x**2 + y**2) + 300*y*z*(-7*x**2 + 2*y**2)*(x**2 + y**2)**2 + z**6*(225*x**2 + 225*y**2) + 2250*z**4*(x**2 + y**2)**2) + R**2*sqrt(x**2 + y**2)*(3*x**2*z**2*(x**2 + 4*y**2)*(4*x**2 + y**2) + 10*x**2*(x**2 + y**2)*(2*x**4 + 13*x**2*y**2 + 2*y**4) + 15*y*z**5*(x**2 - 2*y**2) - 360*y*z**3*(-2*x**2 + y**2)*(x**2 + y**2) + 225*y*z*(x**2 + y**2)**2*(7*x**2 - 2*y**2) - z**6*(675*x**2 + 675*y**2) - 2250*z**4*(x**2 + y**2)**2) + R*(x**2 + y**2)*(-3*x**2*z**2*(x**2 + 4*y**2)*(4*x**2 + y**2) - 5*x**2*(x**2 + y**2)*(2*x**4 + 13*x**2*y**2 + 2*y**4) + 30*y*z**5*(-x**2 + 2*y**2) + 240*y*z**3*(-2*x**2 + y**2)*(x**2 + y**2) + 90*y*z*(-7*x**2 + 2*y**2)*(x**2 + y**2)**2 + z**6*(675*x**2 + 675*y**2) + z**4*(x**2 + y**2)*(1123*x**2 + 1125*y**2)) + (x**2 + y**2)**(3/2)*(x**2 + y**2 + z**2)*(2*x**6 + x**4*(13*y**2 + 105*y*z + 2*z**2) + x**2*(2*y**4 + 75*y**3*z + 2*y**2*z**2 + 15*y*z**3 - 225*z**4) - 15*y**2*z*(2*y**3 + 2*y*z**2 + 15*z**3)))/((x**2 + y**2)**(3/2)*(R**2 - 2*R*sqrt(x**2 + y**2) + x**2 + y**2 + z**2)**3)
    }
    bbox_sz = 2.0

mesh = None

df = pd.DataFrame(columns=['h', 'ndof', 'l2u', 'h1u', 'l2p', 'h1p'])

l2us = []
h1us = []
l2ps = []
h1ps = []

for nref in range(max_nref+1):
    h = 2*bbox_sz*2**(-unif_ref-nref)
    dt = h**((order+1.0)/2)

    if mesh:
        refine_at_levelset(mesh=mesh, levelset=exact['phi'], nref=1)
    else:
        mesh = background_mesh(unif_ref=unif_ref, bbox_sz=bbox_sz)

    ndof, ts, l2uss, h1uss, l2pss, h1pss = navier_stokes(mesh=mesh, dt=dt, order=order, out=False,
                                                         printrates=printrates, **exact)

    # if nref == 0:
    #     fe = open(f"./txt_out/ns/errs-{fname}.txt", "w")
    #     fd = open(f"./txt_out/ns/data-{fname}.txt", "w")
    # else:
    #     fe = open(f"./txt_out/ns/errs-{fname}.txt", "a")
    #     fd = open(f"./txt_out/ns/data-{fname}.txt", "a")

    print(f"h = {h}, ndof = {ndof}")

    # fe.write(f"h = {h}, ndof = {ndof}\n")
    # fd.write(f"h = {h}, ndof = {ndof}\n")
    # fd.write(f"{str(ts)}\n{str(l2uss)}\n{str(h1uss)}\n{str(l2pss)}\n"f"{str(h1pss)}\n\n")

    l2u = max(l2uss)
    l2p = np.sqrt(sci.simps(y=np.array(l2pss) ** 2, x=ts, dx=dt, even='avg'))
    h1u = np.sqrt(sci.simps(y=np.array(h1uss) ** 2, x=ts, dx=dt, even='avg'))
    h1p = np.sqrt(sci.simps(y=np.array(h1pss) ** 2, x=ts, dx=dt, even='avg'))

    df.loc[nref] = [h, ndof, l2u, h1u, l2p, h1p]
    # df.to_csv(f"./csvs/{mode}_p{order}-ns-bdf2-{fname}.csv")

    if len(l2us) > 0:
        msg = f"{ndof:.2E} & {np.log2(l2us[-1] / l2u):.2f} & {l2u:.2E} & {np.log2(h1us[-1] / h1u):.2f} & {h1u:.2E} & {np.log2(l2ps[-1] / l2p):.2f} & {l2p:.2E} & {np.log2(h1ps[-1] / h1p):.2f} & {h1p:.2E}"
        print(msg)
        # fe.write(f"{msg}\n")
    else:
        msg = f"{ndof:.2E} &      & {l2u:.2E} &      & {h1u:.2E} &      & {l2p:.2E} &      & {h1p:.2E}"
        print(msg)
        # fe.write(f"{msg}\n")

    l2us.append(l2u)
    h1us.append(h1u)
    l2ps.append(l2p)
    h1ps.append(h1p)

    # fd.close()
    # fe.close()
